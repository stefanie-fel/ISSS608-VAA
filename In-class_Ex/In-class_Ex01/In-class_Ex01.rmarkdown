---
title: "In-class_Ex01"
author: "Stefanie Felicia"
date: "May, 17 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---



## Getting Started

Objective of this exercise:

-   Split knowledge graph of mini case 1 into nodes and edges tibble data frame

-   Tidy nodes and edges tibble data frame for conforming into tidygraph's requirements

-   Create tidygraph object using tidied nodes and edges, and visualize them

## Import Libraries



```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)
```



The libraries used in this exercise:

-   tidyverse

-   jsonlite: convert JSON data to R objects

-   SmartEDA: help in getting the complete exploratory data analysis by running the function instead of writing long R codes.

-   tidygraph

-   ggraph

## Import Data

In this example, we'll be using the dataset posted by VAST Challenge (Mini Case 1) and use jsonlite to extract the data.



```{r}
kg <- fromJSON("data/MC1_graph.json")
```



## Inspect Structure

We'll inspect the structure of the object using str() function



```{r}
str(kg, max.level=1)
```



## Extract Edges and Nodes Table

The `as_tibble()` function will be used to extract the nodes and links tibble data frames from object into 2 tibble data frame called nodes_tbl and edges_tbl.



```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
```



## Data Exploration

First, we'll check the frequency distribution of Edge Type field of edges_tbl.



```{r}
ggplot(data=edges_tbl, aes(y=`Edge Type`)) + geom_bar()
```



Next, we'll also check for the frequency distribution of Node Type from nodes_tbl.

## Create Knowledge Graph

Next, we'll ensure each of from node list to be mapped in the correct row number.



```{r}
 id_map <- tibble(id=nodes_tbl$id, index=seq_len(nrow(nodes_tbl)))
```



Then we'll map the source and target IDs to row indices.



```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by=c("source" = "id")) %>%
  rename(from=index) %>%
  left_join(id_map, by=c("target" = "id")) %>%
  rename(to=index)
```



Filter any invalid edges (or unmatched edges)



```{r}
edges_tbl<- edges_tbl %>% 
  filter (!is.na(from), !is.na(to))
```



Lastly, we'll use `tbl_graph()` to create tidygraph's graph object



```{r}
graph <- tbl_graph(nodes = nodes_tbl, 
                   edges = edges_tbl, 
                   directed = kg$directed)
class(graph)
```



## Visualizing Knowledge Graph

Before visualizing the knowledge graph, we'll set the seed to ensure reproducibility.



```{r}
set.seed(42)
```



Next we'll visualize and analyze the graph object



```{r}
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 4) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```



The graph looks messy and can be unclear to be used to identify patterns. So we can visualize sub-graph of knowledge graphs so that it's useful for us identify patterns.

## Visualizing the Sub-graph

### Step 1: filter edges to only "Memberof"



```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "Memberof")
```



### Step 2: Extract only connected nodes (i.e. used in these edges)



```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
  
```



### Step 3: Keep only those nodes



```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)  # optional cleanup
```



### Plot the sub-graph



```{r}
ggraph(graph_memberof, 
       layout = "fr") +
  geom_edge_link(alpha = 0.5, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 1) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```



Now, we can clearly see the relationship between musical group and person much easier compared to the knowledge graph.

