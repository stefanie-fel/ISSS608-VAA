[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my portfolio for  Visual Analytics and Applications module in Singapore Management University!\nIn this website, you will find my hands-on exercise, in-class exercise as well as coursework for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)\n\nImporting the data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\nPlotting a simple bar chart to test if it works.\n\nggplot(data=exam_data, aes(x=RACE)) + geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nGrammar of Graphics defined by Leeland Wilkinson (1999) to be framework that follows a layered approach to describe and construct visualization. ggplot2 applies the grammar of graphics:\n\n\n\n7 layers of grammar of graphics\n\n\n\nData: dataset that’s being plotted\nAesthetics: properties that can be perceived on the graphics\nGeometrics: visual elements used for data (e.g. point, bar or line).\nFacets: how to break up and display subset of data as small multiples (conditioning or latticing)\nStatistics: statistical transformation that summarizes data (e.g. mean or confidence intervals)\nCoordinate systems: describes how data coordinates are mapped to the plane of graphic\nThemes: controls display part of the visualization (main title, sub-title, y-axis title and legend).\n\n\n\n\nFirst we will explore geom_bar, which is used to plot bar charts. Here is how the code looks like and the graph:\n\nggplot(data=exam_data, aes(x=RACE))+geom_bar()\n\n\n\n\n\n\n\n\nNext, we’ll be exploring dot plots (geom_dotplot). It’s quite similar to bar chart but in dot form instead of a bar. But it may not always be the most useful graph, as it leaves out y-axis values.\n\nggplot(data=exam_data, aes(x=MATHS))+geom_dotplot(binwidth=2.5, dotsize=0.5) + scale_y_continuous(NULL, breaks=NULL)\n\n\n\n\n\n\n\n\nNext, geom_histogram plots a histogram. But it’s possible to stack different categorical values to compare distributions of each variable like below:\n\nggplot(data=exam_data, \n       aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins=20, color=\"grey30\")  \n\n\n\n\n\n\n\n\nGeom_density is used to draw density estimate, which is a smoother version of a histogram. Similar to the histogram, you can stack different variables.\n\nggplot(data=exam_data, \n       aes(x = MATHS, colour=GENDER)) +\n  geom_density()    \n\n\n\n\n\n\n\n\nGeom_boxplot is used to plot boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +    \n  geom_boxplot(notch=TRUE)   \n\n\n\n\n\n\n\n\nGeom_violin is used to plot a violin plot as a compact display of continuous distribution (similar to boxplot).\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nGeom_point is used to plot scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()      \n\n\n\n\n\n\n\n\nIt’s also possible to plot two different geometry objects at the same graph. In this example, I’ll be plotting boxplot and scatterplot at the same graph. It is done by just adding ‘+’ after the first geom object.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +          geom_point(position=\"jitter\", size = 0.5)  \n\n\n\n\n\n\n\n\n\n\nIncorporating stats_summary after geom object reveal statistic summary, such as average, median, max or min. In this example, the function mean is used:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom =\"point\", fun = \"mean\",    colour =\"red\", size=4)     \n\n\n\n\n\n\n\n\nAdding best fit line is possible by using the function geom_smooth:\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nFacet generate small multiple trellis plot, which display different subset of data. There are two types of facet: facet_wrap and facet_grid\nFacet_wrap is used to wrap 1-dimension sequence of panels into 2-dimension. So this creates multiple plot for one variable like below:\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nFacet_grid is used to create a grid of panels using one or two variables.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nThere are different types of coordinates available such as: coord_cartesian(), coord_flip(), coord_fixed() and coord_quickmap().\nCoord_flip is used to flip horizontal bars into vertical bars.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the range of y and x-axis can be done by specifying xlim and ylim in the coordinate object.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5) + \n  coord_cartesian(xlim=c(0,100),\nylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a lot of different ways to beautify graphs. Themes are one way to add aesthetic to the graphs, as it affects background color, size of fonts, gridline and color of labels. Different themes will affect the look of the graph. In this example, I used the minimal theme:\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)\n\nImporting the data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\nPlotting a simple bar chart to test if it works.\n\nggplot(data=exam_data, aes(x=RACE)) + geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Grammar of Graphics defined by Leeland Wilkinson (1999) to be framework that follows a layered approach to describe and construct visualization. ggplot2 applies the grammar of graphics:\n\n\n\n7 layers of grammar of graphics\n\n\n\nData: dataset that’s being plotted\nAesthetics: properties that can be perceived on the graphics\nGeometrics: visual elements used for data (e.g. point, bar or line).\nFacets: how to break up and display subset of data as small multiples (conditioning or latticing)\nStatistics: statistical transformation that summarizes data (e.g. mean or confidence intervals)\nCoordinate systems: describes how data coordinates are mapped to the plane of graphic\nThemes: controls display part of the visualization (main title, sub-title, y-axis title and legend)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-different-geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-different-geometric-objects",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "First we will explore geom_bar, which is used to plot bar charts. Here is how the code looks like and the graph:\n\nggplot(data=exam_data, aes(x=RACE))+geom_bar()\n\n\n\n\n\n\n\n\nNext, we’ll be exploring dot plots (geom_dotplot). It’s quite similar to bar chart but in dot form instead of a bar. But it may not always be the most useful graph, as it leaves out y-axis values.\n\nggplot(data=exam_data, aes(x=MATHS))+geom_dotplot(binwidth=2.5, dotsize=0.5) + scale_y_continuous(NULL, breaks=NULL)\n\n\n\n\n\n\n\n\nNext, geom_histogram plots a histogram. But it’s possible to stack different categorical values to compare distributions of each variable like below:\n\nggplot(data=exam_data, \n       aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins=20, color=\"grey30\")  \n\n\n\n\n\n\n\n\nGeom_density is used to draw density estimate, which is a smoother version of a histogram. Similar to the histogram, you can stack different variables.\n\nggplot(data=exam_data, \n       aes(x = MATHS, colour=GENDER)) +\n  geom_density()    \n\n\n\n\n\n\n\n\nGeom_boxplot is used to plot boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +    \n  geom_boxplot(notch=TRUE)   \n\n\n\n\n\n\n\n\nGeom_violin is used to plot a violin plot as a compact display of continuous distribution (similar to boxplot).\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nGeom_point is used to plot scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()      \n\n\n\n\n\n\n\n\nIt’s also possible to plot two different geometry objects at the same graph. In this example, I’ll be plotting boxplot and scatterplot at the same graph. It is done by just adding ‘+’ after the first geom object.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +          geom_point(position=\"jitter\", size = 0.5)  \n\n\n\n\n\n\n\n\n\n\nIncorporating stats_summary after geom object reveal statistic summary, such as average, median, max or min. In this example, the function mean is used:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom =\"point\", fun = \"mean\",    colour =\"red\", size=4)     \n\n\n\n\n\n\n\n\nAdding best fit line is possible by using the function geom_smooth:\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-facet-object",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-facet-object",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facet generate small multiple trellis plot, which display different subset of data. There are two types of facet: facet_wrap and facet_grid\nFacet_wrap is used to wrap 1-dimension sequence of panels into 2-dimension. So this creates multiple plot for one variable like below:\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nFacet_grid is used to create a grid of panels using one or two variables.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "There are different types of coordinates available such as: coord_cartesian(), coord_flip(), coord_fixed() and coord_quickmap().\nCoord_flip is used to flip horizontal bars into vertical bars.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the range of y and x-axis can be done by specifying xlim and ylim in the coordinate object.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5) + \n  coord_cartesian(xlim=c(0,100),\nylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-in-r",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "There are a lot of different ways to beautify graphs. Themes are one way to add aesthetic to the graphs, as it affects background color, size of fonts, gridline and color of labels. Different themes will affect the look of the graph. In this example, I used the minimal theme:\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-libraries",
    "title": "Hands-on Exercise 2",
    "section": "Install and Load Libraries",
    "text": "Install and Load Libraries\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\nIn this exercise, the following libraries will be used :\n\ntidyverse: R package that loads data science packages (usually used for data wrangling, analysis and visualization purposes)\nggrepel: R package that provide geom object to prevent overlapping text labels\npatchwork: R package that allows combination of ggplot2 graphs to be plotted in single layout\nhrbrthemes: R package that provide typography-centric themes and themes components in ggplot2\nggthemes: R package that provide more themes, geoms and scales for ggplot2\n\nImport Data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-package",
    "title": "Hands-on Exercise 2",
    "section": "ggrepel Package",
    "text": "ggrepel Package\nIt replaces geom_text with geom_text_repel and geom_label with geom_label_repel. In this example, a graph of primary 3 students’ maths and english scores were plotted using geom_label.\n\nggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm, \nlinewidth=0.5) +  \ngeom_label(aes(label = ID), \nhjust = .5, vjust = -.5) +\ncoord_cartesian(xlim=c(0,100),\nylim=c(0,100)) +\nggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nBut as can be seen, the data points looks cluttered and overlap with each other. But when we replace the geom_label with geom_label_repel, this is how the graph looks like:\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +    geom_point() + \n  geom_smooth(method=lm, linewidth=0.5) +  geom_label_repel(aes(label = ID), \nfontface = \"bold\") + coord_cartesian(xlim=c(0,100),               ylim=c(0,100)) + ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nThe graph looks better as there’s no more overlapping labels so that the graph becomes clearer."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "ggtheme Package",
    "text": "ggtheme Package\nWhen using ggplot2, we can customize how the graph looks like as ggplot2 offers in-built themes (e.g. theme_gray, theme_bw, theme_classic, theme_dark, theme_light, theme_linedraw, theme_minimal and theme_void). For more information about themes in ggtheme, click here. In this example, theme_gray is used, which looks like this:\n\nggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") + theme_gray() + ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\nHowever, ggtheme package offers more than just basic themes. It also has professional-looking themes that are aesthetically more pleasing for presentation. In this example, the `theme_economist` is used:\n\nggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100,         color=\"grey25\", fill=\"grey90\") + ggtitle(\"Distribution of Maths scores\") + theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "hrbthems Package",
    "text": "hrbthems Package\nhrbthems package provides a base theme that focus on typographic elements (incl. where labels are placed and fonts)\n\nggplot(data=exam_data, \naes(x = MATHS)) +\ngeom_histogram(bins=20, \nboundary = 100,\ncolor=\"grey25\", \nfill=\"grey90\") +\nggtitle(\"Distribution of Maths scores\") +\ntheme_ipsum(axis_title_size = 18,\nbase_size = 15,\ngrid = \"Y\")\n\n\n\n\n\n\n\n\nThe code above uses the following arguments:\n\naxis_title_size is used to increase font size\nbase_size is used to increase default axis label\ngrid is used to remove grid line"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-beyond-1-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-beyond-1-graph",
    "title": "Hands-on Exercise 2",
    "section": "Plotting Beyond 1 Graph",
    "text": "Plotting Beyond 1 Graph\nHow can we combine different graphs into one ? For example, we want to compare students’ math scores, english scores and combination of english and math scores. How can we plot them into one ?\n\np1 &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\ngeom_histogram(bins=20, \nboundary = 100,\ncolor=\"grey25\", \nfill=\"grey90\") + coord_cartesian(xlim=c(0,100)) +\nggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, aes(x = ENGLISH)) +\ngeom_histogram(bins=20, \nboundary = 100, color=\"grey25\", fill=\"grey90\") +\ncoord_cartesian(xlim=c(0,100)) +\nggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm, \nsize=0.5) +  \ncoord_cartesian(xlim=c(0,100),                ylim=c(0,100)) +\nggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\nWe end up with 3 individual graphs. But with patchwork, we can combine separate graphs into 1. Few syntax used to combine graphs:\n\n\\(+\\) sign is used to combine two-column layout.\n\\(()\\) sign is used to create subplot group\n\\(/\\) sign is used to build two-row layout.\n\\(|\\) sign is used to place graphs beside each other.\nThe code below combines two graph into one row, side by side.\n\n\np1 + p2\n\n\n\n\n\n\n\n\nWhile this code chunk plots p1 to be above p2, and p3 to be beside both plots.\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s also possible to add annotation in patchwork using plot_annotation\n\n\n\n\n((p1 / p2)|p3) + plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nAdding Another Graph in a Graph\nWe can add another graph anywhere within a graph using inset-element() of patchwork package.\n\np3 + inset_element(p2, \n                   left = 0.01, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\nUsing patchwork and ggtheme Together\nIt’s possible to combine your graphs while applying theme to it like below.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Singapore is a country home to more than 5 million population. Though it may be a small country, but understanding its demographic structure and distribution is crucial for assessing its development and planning needs.\nUnderstanding demographic structure and distribution is vital as helps us to see how a country is doing. The distribution and structure of a country can reveal how developed a country is, through birth rate, death rates, economy and literacy.\nAdditionally, understanding demographics also helps governments, and businesses in order to design policies, allocate resources and infrastructure development and provide public services that are effectively targeted.\n\n\nIn this take home exercise, we desire to create demographic structures and distribution of Singapore in 2024.\n\n\n\nThe dataset was extracted from Singstat under the name Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024.\n\nIt comprised of 6 variables and 60K records. The dataset recorded the demographics and count of residents who lived in each sub zone and planning area in June 2024.\n\n\n\n\npacman::p_load(dplyr, tidyverse, scales, forcats, knitr)\n\nthe library used for this exercise are:\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\ndplyr\nGrammar of data manipulation\n\n\ntidyverse\nProvide key data transformation functions\n\n\nscales\nProvides internal scaling infrastructure used by ggplot2 to a general framework\n\n\nforcats\nTools for working with factors (categorical variable)\n\n\nknitr\nProvides a tool for dynamic report generation\n\n\n\n\n\n\n\n\n\npopulation_data &lt;- read_csv(\"respopagesex2024.csv\")\n\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAs can be seen above, the data set comprise of 6 variables: 4 variables are character data type (namely, PA, SZ, age and sex), and 2 variables are double data type (number of population, time). Here is the a snippet of the data set:\n\nhead(population_data)\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "background of what I’m doing and objective of the analysis\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The dataset was extracted from Singstat under the name Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024.\n\nIt comprised of 6 variables and 60K records. The dataset recorded the demographics and count of residents who lived in each sub zone and planning area in June 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-required-libraries",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-required-libraries",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "pacman::p_load(dplyr, tidyverse, scales, forcats, knitr)\n\nthe library used for this exercise are:\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\ndplyr\nGrammar of data manipulation\n\n\ntidyverse\nProvide key data transformation functions\n\n\nscales\nProvides internal scaling infrastructure used by ggplot2 to a general framework\n\n\nforcats\nTools for working with factors (categorical variable)\n\n\nknitr\nProvides a tool for dynamic report generation"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "population_data &lt;- read_csv(\"respopagesex2024.csv\")\n\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAs can be seen above, the data set comprise of 6 variables: 4 variables are character data type (namely, PA, SZ, age and sex), and 2 variables are double data type (number of population, time). Here is the a snippet of the data set:\n\nhead(population_data)\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this exercise, we’ll be using the following libraries:\n\nggiraph: allows user to create dynamic ggplot graphs\nplotly: create interactive and publication-quality graphs\nDT: provide interface to the JavaScript library called DataTables\ntidyverse\npatchwork\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this exercise, we’ll be using the following libraries:\n\nggiraph: allows user to create dynamic ggplot graphs\nplotly: create interactive and publication-quality graphs\nDT: provide interface to the JavaScript library called DataTables\ntidyverse\npatchwork\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on Exercise 3",
    "section": "Import data",
    "text": "Import data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data",
    "title": "Hands-on Exercise 3",
    "section": "Exploring Interactive Data",
    "text": "Exploring Interactive Data\nVisualization using ggiraph how is it interactive ?\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nCustomize Style in Tooltip\nWe can customize the style (e.g. background opacity, duration of transition, or use extra css for customization, etc) by using opts_tooltip() function. In this example, we’ll change the background color of girapfe() object from black to white, black font color and bold font to make it easier to see than a black background color since the dotplot also has black color.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\nDisplay Statistics using tooltip\nIt is also possible to display other information, e.g. statistics. In this example, the tooltip calculates the average and 90% of confidence interval and it will be displayed when the mouse hovers onto the bar graph:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-feature-using-data_id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-feature-using-data_id",
    "title": "Hands-on Exercise 3",
    "section": "Interactive Feature using data_id",
    "text": "Interactive Feature using data_id\nAnother way to incorporate interactivity in graph is by using data_id. data_id is used to assign unique identifier to each graphical element. It’s usually used to group elements for hover or election. In this code chunk, it assigns each dot of the ID to its CLASS, so when user hover to a particular CLASS, data point with the same CLASS will be highlighted together.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(   \n    aes(data_id = CLASS), \n    stackgroups = TRUE,   \n    binwidth = 1,         \n    \n    method = \"histodot\") + scale_y_continuous(NULL,               breaks = NULL)\n\ngirafe(                 \n  ggobj = p,              \n  width_svg = 6,          \n  height_svg = 6*0.618    \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data-using-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data-using-ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "Exploring Interactive Data using ggiraph",
    "text": "Exploring Interactive Data using ggiraph\nWe can create interactive graphs with ggiraph by utilizing ggplot geometries. ggplot geometries understand 3 arguments:\n\nTooltip: a small message pops up when user hovers over elements.\nOnclick: contain JavaScript functions that would be executed when the graph is clicked.\nData_id: contain an id to be associated with elements.\n\n\nTooltip Argument\nThe code chunk will plot interactive statistical graph using ggiraph. First, ggplot object will be created and then `girafe()` of ggiraph will create interactive svg object,\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that different from what we’ve learned before we don’t use geom_dotplot() like we did on Hands On Exercise 1, instead we use geom_dotplot_interactive() to create the basic graph.\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\nCustomize Style in Tooltip\nWe can customize the style (e.g. background opacity, duration of transition, or use extra css for customization, etc) by using opts_tooltip() function. In this example, we’ll change the background color of girapfe() object from black to white, black font color and bold font to make it easier to see than a black background color since the dotplot also has black color.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\nDisplay Statistics using tooltip\nIt is also possible to display other information, e.g. statistics. In this example, the tooltip calculates the average and 90% of confidence interval and it will be displayed when the mouse hovers onto the bar graph:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-argument",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-argument",
    "title": "Hands-on Exercise 3",
    "section": "Tooltip Argument",
    "text": "Tooltip Argument\nThe code chunk will plot interactive statistical graph using ggiraph. First, ggplot object will be created and then `girafe()` of ggiraph will create interactive svg object,\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that different from what we’ve learned before we don’t use geom_dotplot() like we did on Hands On Exercise 1, instead we use geom_dotplot_interactive() to create the basic graph.\n\n\n\nDisplay Multiple Information on Tooltip\nContent in tooltip can be customized by including a list object like in below code chunk.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first line appends a new column using$tooltip to the exam_data dataset, whereas the c(paste0(..) combines strings to display when user hover on the graph.\n\n\nCustomize Style in Tooltip\nWe can customize the style (e.g. background opacity, duration of transition, or use extra css for customization, etc) by using opts_tooltip() function. In this example, we’ll change the background color of girapfe() object from black to white, black font color and bold font to make it easier to see than a black background color since the dotplot also has black color.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\nDisplay Statistics using tooltip\nIt is also possible to display other information, e.g. statistics. In this example, the tooltip calculates the average and 90% of confidence interval and it will be displayed when the mouse hovers onto the bar graph:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customizing-style-of-data_id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customizing-style-of-data_id",
    "title": "Hands-on Exercise 3",
    "section": "Customizing Style of data_id",
    "text": "Customizing Style of data_id\nIt is also possible to change the color of the hover effect in data_id. By default, the color orange as seen previously, but the color can be changed using opts_hover which changes the color of the dots. Additionally, we can add opts_hover_inv to change the style of other elements that are not being hovered.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3",
    "section": "Click Effect with Onclick",
    "text": "Click Effect with Onclick\nonlick argument will allow user who click on the graph to be redirected according to link provided on the onclick argument.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,  \n    binwidth = 1,         \n    method = \"histodot\") +   \n  scale_y_continuous(NULL,\n breaks = NULL)\ngirafe(                   \n  ggobj = p,            \n  width_svg = 6,          \n  height_svg = 6*0.618) \n\n\n\n\n\n\nCoordinated graphs using ggiraph and patchwork\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graph-using-crosstalk",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graph-using-crosstalk",
    "title": "Hands-on Exercise 3",
    "section": "Interactive Graph using crosstalk",
    "text": "Interactive Graph using crosstalk\nCrosstalk is an add-on to the htmlwidgets package that allows cross-widget interactions (linked brushing and filtering).\n\nInteractive Data Visualization using DT Package\nDT package creates interactive DataTables (through JavaScript library), which renders a HTML data table. Users can filter, highlight rows, link table to other widgets, etc. In this example, we can display all of data in the dataset.\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\nLinked Brushing with crosstalk\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs can be seen, as user filter using the search bar, the graph is linked. What we can learn from this example:\n\nuse highlight() : add linked brushing functionality (note: it only works for Plotly plots)\nuse bscols() : arranges widget side by side using bootstrap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "When creating animation, the plot doesn’t move. Instead, individual plots are stitched together like a video. Each frame is a different plot when conveying motion, which is built using relevant subset of the aggregate data. Then the subset drives the flow of the animation when stitched back together.\n\nTerminologies in this Exercise:\n\nFrame: each frame represent different point in time or category. When the frame changes, the data point also changes which represent the updated version of data.\nAnimation Attributes: the settings that control how the animation behaves e.g. duration of each frame or which plot would be the start of animation)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#example-build-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#example-build-population-bubble-plot",
    "title": "Hands-on Exercise 4",
    "section": "Example: Build Population Bubble Plot",
    "text": "Example: Build Population Bubble Plot\nIn this example, we’ll build a bubble plot uisng ggplot2.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#animated-bubble-plot",
    "title": "Hands-on Exercise 4",
    "section": "Animated Bubble Plot",
    "text": "Animated Bubble Plot\nWe can animate the plot by adding to the code:\n\ntransition_time() to create transition through the YEAR variable (animation moves as the year changes)\nease_aes() is used to control the of aesthetics. The default is linear, but we can choose from quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-a",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-a",
    "title": "Take-home_Ex01",
    "section": "Tab A",
    "text": "Tab A\nContent for Tab A."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-b",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-b",
    "title": "Take-home_Ex01",
    "section": "Tab B",
    "text": "Tab B\nContent for Tab B."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-x",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-x",
    "title": "Take-home_Ex01",
    "section": "Tab X",
    "text": "Tab X\nContent for Tab X."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-y",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tab-y",
    "title": "Take-home_Ex01",
    "section": "Tab Y",
    "text": "Tab Y\nContent for Tab Y.\n\nWe first check for unique values in the Age variable.\n\nunique(population_data$Age)\n\n [1] \"0\"           \"1\"           \"2\"           \"3\"           \"4\"          \n [6] \"5\"           \"6\"           \"7\"           \"8\"           \"9\"          \n[11] \"10\"          \"11\"          \"12\"          \"13\"          \"14\"         \n[16] \"15\"          \"16\"          \"17\"          \"18\"          \"19\"         \n[21] \"20\"          \"21\"          \"22\"          \"23\"          \"24\"         \n[26] \"25\"          \"26\"          \"27\"          \"28\"          \"29\"         \n[31] \"30\"          \"31\"          \"32\"          \"33\"          \"34\"         \n[36] \"35\"          \"36\"          \"37\"          \"38\"          \"39\"         \n[41] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[46] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[51] \"50\"          \"51\"          \"52\"          \"53\"          \"54\"         \n[56] \"55\"          \"56\"          \"57\"          \"58\"          \"59\"         \n[61] \"60\"          \"61\"          \"62\"          \"63\"          \"64\"         \n[66] \"65\"          \"66\"          \"67\"          \"68\"          \"69\"         \n[71] \"70\"          \"71\"          \"72\"          \"73\"          \"74\"         \n[76] \"75\"          \"76\"          \"77\"          \"78\"          \"79\"         \n[81] \"80\"          \"81\"          \"82\"          \"83\"          \"84\"         \n[86] \"85\"          \"86\"          \"87\"          \"88\"          \"89\"         \n[91] \"90_and_Over\"\n\n\nWe can’t change the variable to numeric data type because we have values “90_and_Over”. So we can change it to age 90 and change the data type.\n\npopulation_data$Age[population_data$Age == \"90_and_Over\"] &lt;- \"90\"\ntypeof(population_data$Age) \n\n[1] \"character\"\n\npopulation_data$Age &lt;- as.numeric(population_data$Age)\n\n\nunique(population_data$Sex)\n\n[1] \"Males\"   \"Females\"\n\n\n\npopulation_data$Sex[population_data$Sex == \"Females\"] &lt;- \"1\"\npopulation_data$Sex[population_data$Sex == \"Males\"] &lt;- \"0\"\npopulation_data$Sex &lt;- as.numeric(population_data$Sex)\n\nUnivariate\n\nggplot(data = population_data, aes(x = Sex)) +\n  geom_bar(color = \"grey30\", fill = \"steelblue\") +\n  labs(y = \"Count\", title = \"Count of Records by Sex\")\n\n\n\n\n\n\n\n\n\nggplot(data=population_data, \n       aes(x = Age)) +\n  geom_histogram(bins=20, color=\"gray30\", fill=\"cyan3\")+ \n  labs(title = \"Age Distribution of Singapore Resident June 2024\",\n       x = \"Age\",\n       y = \"Count\") +\n  theme_minimal()  \n\n\n\n\n\n\n\n\nVariable Selection\nAge and Gender Distribution of Singapore Residents\n\npopulation_data %&gt;%\n  mutate(population = ifelse(Sex == 0, Pop * (-1), Pop * 1)) %&gt;%\n  ggplot(aes(x = Age, y = population, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Age-Sex Pyramid\", x = \"Age\", y = \"Population\")\n\n\n\n\n\n\n\n\nPopulation of Residents Living in Each Subzone/Planning Area\nDemographics of Residents Living in Each Subzone/Planning Area\nReferences\n\nHow to Count Duplicates in R (With Examples)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-and-gender-distribution-of-singapore-residents",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-and-gender-distribution-of-singapore-residents",
    "title": "Take-home Exercise 1",
    "section": "3.1 Age and Gender Distribution of Singapore Residents",
    "text": "3.1 Age and Gender Distribution of Singapore Residents\n\nGraphCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npopulation_data &lt;- population_data %&gt;%\n  mutate(age_group = cut(Age, \n               breaks = c(seq(0, 90, 5), Inf),  \n               right = FALSE, \n               include.lowest = TRUE,\n               labels = c(paste(seq(0, 85, 5), seq(4, 89, 5), sep = \"-\"), \"90+\")),\n             Sex = factor(Sex, levels = c(0, 1), labels = c(\"Male\", \"Female\")),\n    PopAdj = ifelse(Sex == \"Male\", -Pop, Pop)\n  )\nagg_data &lt;- population_data %&gt;%\n  group_by(age_group, Sex) %&gt;%\n  summarise(Pop = sum(PopAdj), .groups = 'drop')\nggplot(agg_data, aes(x = age_group, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Age-Sex Pyramid\", x = \"Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = abs)\n\n\n\n\n\n\n\n\n\n\nInsight from the visualization\n\n\n\n\nSingapore has a higher economically active population (aged 15 – 65) than elderly (aged 65+) and young dependents (aged 0 – 14) in 2024. Thus, we can conclude that Singapore’s population has a stationary pyramid\nSingapore also has roughly similar proportion of male to female population as well as similar age distribution between male and female.\nThe population also has a high number of elderly, which can indicate an advanced healthcare system and low mortality rate."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-of-residents-living-in-each-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-of-residents-living-in-each-planning-area",
    "title": "Take-home_Ex01",
    "section": "Population of Residents Living in Each Planning Area",
    "text": "Population of Residents Living in Each Planning Area\n\nGraphCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop_pa &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total_pop = sum(Pop))\nggplot(data = pop_pa, aes(x = PA, y = total_pop)) +\n  geom_col(color = \"gray30\", fill = \"steelblue\") +\n  labs(\n    title = \"Singapore Resident Population by Planning Area\",\n    x = \"Planning Area\",\n    y = \"Count\"\n  ) +\n  scale_y_continuous(labels = label_comma())+ theme_minimal() +\n  coord_flip()\n\n\n\n\nDemographics of Residents Living in Each Planning Area\nReferences\n\nHow to Count Duplicates in R (With Examples)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-demographics-of-residents-living-in-each-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-demographics-of-residents-living-in-each-planning-area",
    "title": "Take-home Exercise 1",
    "section": "3. 2 Population and Demographics of Residents Living in Each Planning Area",
    "text": "3. 2 Population and Demographics of Residents Living in Each Planning Area\n\nPopulation of ResidentsDemographics of Residents Living in Each Planning Area\n\n\n\npop_pa &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total_pop = sum(Pop))\npop_pa$PA &lt;- fct_rev(factor(pop_pa$PA, levels = pop_pa$PA[order(pop_pa$total_pop, decreasing = TRUE)]))\nggplot(data = pop_pa, aes(x = PA, y = total_pop)) +\n  geom_col(color = \"gray30\", fill = \"steelblue\") +\n  labs(\n    title = \"Singapore Resident Population by Planning Area\",\n    x = \"Planning Area\",\n    y = \"Count\"\n  ) +\n  scale_y_continuous(labels = label_comma())+ theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\n\npopulation_binned &lt;- population_data %&gt;%\n  mutate(age_group = cut(\n    Age,\n    breaks = c(seq(0, 90, 5), Inf), \n    labels = c(paste(seq(0, 85, 5), seq(4, 89, 5), sep = \"-\"), \"90+\"),\n    right = FALSE,\n    include.lowest = TRUE\n  )) %&gt;%\n  group_by(PA, age_group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\npopulation_binned_wide &lt;- population_binned %&gt;%\n  pivot_wider(names_from = age_group, values_from = total_pop, values_fill = 0)\npopulation_binned_wide %&gt;%\n  kable(\n    caption = \"Population by Planning Area and Age Group\")\n\n\n\n\nPopulation by Planning Area and Age Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPA\n0-4\n5-9\n10-14\n15-19\n20-24\n25-29\n30-34\n35-39\n40-44\n45-49\n50-54\n55-59\n60-64\n65-69\n70-74\n75-79\n80-84\n85-89\n90+\n\n\n\n\nAng Mo Kio\n4470\n5950\n6500\n7420\n7900\n9310\n10340\n9730\n10750\n11280\n12110\n11720\n12440\n12010\n11160\n7970\n5100\n2760\n1530\n\n\nBedok\n9010\n11490\n12230\n13370\n14540\n16510\n18450\n18310\n19020\n19840\n20680\n19890\n21330\n20560\n17330\n12220\n6790\n3870\n2220\n\n\nBishan\n2990\n3800\n4120\n4450\n4610\n5640\n6630\n5910\n5660\n5920\n6460\n5970\n6710\n6600\n5220\n3450\n2110\n1210\n750\n\n\nBoon Lay\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nBukit Batok\n8070\n8250\n7680\n8340\n9340\n10690\n13710\n13670\n11430\n11390\n12160\n12270\n12450\n11400\n8220\n4700\n2450\n1380\n790\n\n\nBukit Merah\n5110\n5730\n6290\n6410\n6360\n8020\n9940\n10590\n10970\n11390\n11220\n10320\n10420\n10390\n9480\n7350\n4860\n2830\n1710\n\n\nBukit Panjang\n5450\n6350\n6950\n7510\n8230\n9730\n10680\n10190\n9720\n9260\n10130\n10120\n10890\n9390\n6450\n3850\n2070\n1160\n600\n\n\nBukit Timah\n3430\n5720\n5310\n5100\n4460\n4340\n4720\n5730\n6390\n6560\n6680\n5430\n5000\n4570\n3980\n2990\n1880\n1240\n720\n\n\nCentral Water Catchment\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nChangi\n130\n150\n120\n100\n80\n90\n130\n180\n150\n160\n140\n100\n100\n80\n40\n30\n10\n20\n20\n\n\nChangi Bay\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nChoa Chu Kang\n7680\n9030\n9370\n10450\n12720\n16260\n15460\n13160\n12580\n12270\n14100\n15970\n14880\n11210\n7410\n4070\n2150\n1210\n660\n\n\nClementi\n4110\n5150\n5210\n5150\n4910\n5290\n7110\n7810\n8220\n8010\n7670\n6580\n6330\n6020\n6060\n4570\n2600\n1410\n750\n\n\nDowntown Core\n90\n90\n70\n90\n110\n270\n560\n640\n540\n460\n390\n300\n190\n160\n110\n50\n0\n10\n40\n\n\nGeylang\n4670\n4680\n4470\n4800\n5080\n7020\n10770\n9570\n8350\n7980\n8020\n7780\n8530\n8320\n6650\n4580\n2820\n1670\n1060\n\n\nHougang\n8080\n10020\n9960\n10600\n12010\n15270\n17470\n17090\n15980\n15120\n16300\n16540\n18400\n17210\n12640\n7870\n4470\n2450\n1300\n\n\nJurong East\n1980\n2540\n2990\n3540\n4320\n4890\n4960\n4740\n4860\n4990\n5580\n5530\n5950\n6130\n5290\n3290\n1670\n870\n470\n\n\nJurong West\n8850\n11590\n13400\n15080\n16270\n17860\n18230\n17410\n19430\n20000\n19960\n19250\n18110\n16380\n12550\n7270\n3670\n1710\n890\n\n\nKallang\n3350\n3990\n4040\n4080\n4470\n5500\n7230\n7400\n7420\n7590\n7720\n7080\n7490\n7220\n6290\n4580\n2920\n1730\n1090\n\n\nLim Chu Kang\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nMandai\n70\n110\n90\n130\n150\n150\n140\n150\n130\n160\n180\n160\n180\n130\n90\n70\n30\n0\n10\n\n\nMarina East\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nMarina South\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nMarine Parade\n1680\n2440\n2500\n2320\n2270\n2310\n2600\n3110\n3570\n3810\n3910\n3250\n3140\n2770\n2410\n2020\n1340\n920\n580\n\n\nMuseum\n10\n10\n0\n0\n0\n40\n50\n100\n110\n90\n100\n20\n0\n0\n0\n0\n0\n0\n0\n\n\nNewton\n480\n630\n620\n550\n380\n440\n590\n830\n890\n910\n870\n690\n590\n480\n360\n300\n140\n90\n70\n\n\nNorth-Eastern Islands\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nNovena\n1950\n2950\n2880\n2540\n2280\n2830\n3460\n3950\n4230\n4360\n4280\n3520\n3190\n2900\n2480\n1840\n1210\n800\n500\n\n\nOrchard\n0\n10\n40\n50\n20\n10\n70\n60\n120\n120\n130\n60\n70\n40\n70\n0\n0\n0\n0\n\n\nOutram\n410\n440\n700\n650\n510\n870\n1040\n970\n1180\n1370\n1240\n1190\n1350\n1330\n1260\n940\n590\n380\n320\n\n\nPasir Ris\n4900\n6370\n7100\n7910\n9830\n12360\n10980\n8900\n9220\n9780\n10670\n13090\n12590\n8980\n5720\n3390\n1940\n1080\n670\n\n\nPaya Lebar\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nPioneer\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nPunggol\n12650\n15780\n14210\n11140\n8950\n9500\n16160\n20880\n21610\n17490\n14080\n10060\n8540\n6970\n5370\n3540\n1700\n840\n410\n\n\nQueenstown\n3930\n4130\n4470\n4440\n4630\n5870\n7720\n7520\n7480\n7680\n7820\n7020\n6660\n6010\n5490\n4620\n3220\n2140\n1190\n\n\nRiver Valley\n470\n700\n660\n660\n560\n530\n750\n910\n1210\n1220\n1150\n860\n630\n580\n440\n360\n160\n30\n90\n\n\nRochor\n400\n390\n420\n510\n520\n770\n910\n1070\n1020\n1020\n1040\n880\n900\n910\n860\n600\n400\n200\n220\n\n\nSeletar\n0\n0\n0\n10\n10\n0\n0\n0\n0\n30\n70\n20\n0\n0\n0\n0\n0\n0\n0\n\n\nSembawang\n6220\n6350\n6160\n6590\n6780\n7020\n9560\n9360\n8710\n8900\n8810\n7330\n6500\n5050\n3330\n1870\n1180\n600\n350\n\n\nSengkang\n13110\n16530\n16640\n15290\n14050\n15640\n20370\n23410\n24470\n21810\n19680\n16110\n15180\n13250\n9300\n5560\n2940\n1470\n740\n\n\nSerangoon\n3660\n4540\n5130\n5750\n6380\n7920\n8900\n8050\n7510\n7680\n8320\n8280\n9080\n9370\n7410\n4870\n2740\n1690\n970\n\n\nSimpang\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nSingapore River\n240\n340\n250\n210\n160\n150\n260\n430\n470\n450\n420\n260\n220\n140\n100\n80\n20\n0\n0\n\n\nSouthern Islands\n140\n180\n170\n160\n110\n90\n120\n180\n230\n270\n290\n220\n200\n110\n80\n20\n0\n10\n0\n\n\nStraits View\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nSungei Kadut\n10\n0\n50\n0\n30\n60\n40\n40\n30\n40\n80\n30\n60\n50\n40\n20\n0\n10\n10\n\n\nTampines\n14650\n14190\n12560\n12840\n14340\n20130\n26990\n23000\n19710\n17200\n17440\n19170\n21740\n20330\n14550\n8230\n4250\n2340\n1290\n\n\nTanglin\n1130\n1600\n1580\n1280\n1080\n1160\n1430\n1880\n2140\n2150\n2080\n1650\n1410\n1170\n1040\n870\n430\n280\n180\n\n\nTengah\n850\n300\n290\n230\n200\n890\n1700\n850\n650\n400\n360\n300\n290\n290\n200\n90\n20\n20\n10\n\n\nToa Payoh\n6390\n6330\n5740\n5840\n6020\n7760\n12270\n11240\n9620\n9560\n9830\n9030\n9520\n9250\n7730\n5800\n4130\n2520\n1450\n\n\nTuas\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nWestern Islands\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nWestern Water Catchment\n10\n40\n50\n20\n120\n40\n30\n60\n80\n50\n10\n20\n50\n10\n0\n0\n0\n0\n0\n\n\nWoodlands\n10500\n11850\n12810\n14940\n18490\n22000\n20010\n17490\n16910\n17480\n19930\n21040\n18490\n14130\n9130\n5240\n2770\n1550\n750\n\n\nYishun\n10070\n11980\n11450\n11280\n12150\n15010\n18710\n18920\n17980\n15660\n15840\n15940\n17570\n14800\n10790\n6240\n3350\n1700\n880\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemographics of Residents per Planning Area\n\n\n\n\nMost residents live in Tampines, Bedok, Sengkang, Jurong West, or Woodlands. With each planning area having more than 200,000 residents living in the planning area. This could be\nThere are 13 out of 55 planning areas no residents live in.\nA lot of younger population (aged 0 – 14) lIve in these planning area: Tampines, Sengkang. Punggol, Woodlands, Yishun or Jurong West\nThe following planning areas have higher number of elderly who lives there: Bedok, Bukit Merah, Ang Mo Kio, Toa Payoh, Hougang"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#column-transformation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#column-transformation",
    "title": "Take-home Exercise 1",
    "section": "2.1 Column Transformation",
    "text": "2.1 Column Transformation\n\nAgeSex\n\n\nCurrently, the Age variable is in string data type and we want to change it to numeric data type.\n\npopulation_data$Age[population_data$Age == \"90_and_Over\"] &lt;- \"90\"\ntypeof(population_data$Age) \n\n[1] \"character\"\n\npopulation_data$Age &lt;- as.numeric(population_data$Age)\n\n\n\nWe also want to implement dummy encoding to the Sex variable from “Males” to 0 and “Females” to 1:\n\npopulation_data$Sex[population_data$Sex == \"Females\"] &lt;- \"1\"\npopulation_data$Sex[population_data$Sex == \"Males\"] &lt;- \"0\"\npopulation_data$Sex &lt;- as.numeric(population_data$Sex)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take home exercise, we desire to create demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-exploration",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-exploration",
    "title": "Take-home Exercise 1",
    "section": "2.2 Data Exploration",
    "text": "2.2 Data Exploration\n\n2.2.1. Frequency of Genders\n\ngender_distribution &lt;- population_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\nggplot(gender_distribution, aes(x = factor(Sex),y=Pop)) +\n  geom_bar(stat = \"identity\", color = \"grey30\", fill = \"steelblue\") +\n  scale_x_discrete(labels = c(\"0\" = \"Male\", \"1\" = \"Female\")) +\n  labs(x = \"Gender\", y = \"Population\", title = \"Count of Each Gender\")\n\n\n\n\n\n\n\n\n\n\n2.2.2 Distribution of Age\n\nage_distribution &lt;- population_data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\n\n\nggplot(age_distribution, aes(x = Age, y = Pop)) +\n  geom_col(fill = \"steelblue\", color = \"gray30\") +\n  labs(title = \"Age Distribution of Singapore Residents\",\n       x = \"Age\",\n       y = \"Population\")\n\n\n\n\n\n\n\n\n\n\n2.2.3. Number of Subzone each Planning Area Has\n\npa_count &lt;- population_data %&gt;%\n  distinct(PA, SZ) %&gt;%              \n  count(PA, name = \"number_of_subzones\") %&gt;%\n  arrange(desc(number_of_subzones))\n\nkable(pa_count, caption = \"Number of Subzones per Planning Area\")\n\n\nNumber of Subzones per Planning Area\n\n\nPA\nnumber_of_subzones\n\n\n\n\nBukit Merah\n17\n\n\nQueenstown\n15\n\n\nDowntown Core\n13\n\n\nAng Mo Kio\n12\n\n\nToa Payoh\n12\n\n\nJurong East\n11\n\n\nHougang\n10\n\n\nRochor\n10\n\n\nBukit Batok\n9\n\n\nClementi\n9\n\n\nJurong West\n9\n\n\nKallang\n9\n\n\nSembawang\n9\n\n\nWoodlands\n9\n\n\nYishun\n9\n\n\nBedok\n8\n\n\nBukit Timah\n8\n\n\nPasir Ris\n8\n\n\nBukit Panjang\n7\n\n\nPunggol\n7\n\n\nSengkang\n7\n\n\nSerangoon\n7\n\n\nChoa Chu Kang\n6\n\n\nNewton\n6\n\n\nTengah\n6\n\n\nTuas\n6\n\n\nGeylang\n5\n\n\nMarine Parade\n5\n\n\nNovena\n5\n\n\nPaya Lebar\n5\n\n\nPioneer\n5\n\n\nRiver Valley\n5\n\n\nSungei Kadut\n5\n\n\nTampines\n5\n\n\nBoon Lay\n4\n\n\nOutram\n4\n\n\nSeletar\n4\n\n\nSimpang\n4\n\n\nTanglin\n4\n\n\nBishan\n3\n\n\nChangi\n3\n\n\nMandai\n3\n\n\nMuseum\n3\n\n\nOrchard\n3\n\n\nSingapore River\n3\n\n\nWestern Islands\n3\n\n\nWestern Water Catchment\n3\n\n\nSouthern Islands\n2\n\n\nCentral Water Catchment\n1\n\n\nChangi Bay\n1\n\n\nLim Chu Kang\n1\n\n\nMarina East\n1\n\n\nMarina South\n1\n\n\nNorth-Eastern Islands\n1\n\n\nStraits View\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "When creating animation, the plot doesn’t move. Instead, individual plots are stitched together like a video. Each frame is a different plot when conveying motion, which is built using relevant subset of the aggregate data. Then the subset drives the flow of the animation when stitched back together.\n\nTerminologies in this Exercise:\n\nFrame: each frame represent different point in time or category. When the frame changes, the data point also changes which represent the updated version of data.\nAnimation Attributes: the settings that control how the animation behaves e.g. duration of each frame or which plot would be the start of animation)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#example-build-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#example-build-population-bubble-plot",
    "title": "Hands-on Exercise 3a",
    "section": "Example: Build Population Bubble Plot",
    "text": "Example: Build Population Bubble Plot\nIn this example, we’ll build a bubble plot uisng ggplot2.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#animated-bubble-plot",
    "title": "Hands-on Exercise 3a",
    "section": "Animated Bubble Plot",
    "text": "Animated Bubble Plot\nWe can animate the plot by adding to the code:\n\ntransition_time() to create transition through the YEAR variable (animation moves as the year changes)\nease_aes() is used to control the of aesthetics. The default is linear, but we can choose from quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html",
    "title": "Hands-on Exrecise 4a",
    "section": "",
    "text": "Objective of this exercise:\n\nLearn about new graphs: ridgeline plot and raincloud plot to plot uncertainty\nUse ggridge library to plot ridgeline plot and ggdist library to plot raincloud plot\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\nThe libraries used in this exercise would be:\n\nggridges: create ridgeline plots in ggplot2\nggdist: provide ggplot2 geoms and stats designed for visualizing distribution and uncertainty\ntidyverse\nggthemes\ncolorspace: toolbox for manipulating anf assessing colors and palettes"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#ridgeline-plot",
    "title": "Hands-on Exrecise 4a",
    "section": "Ridgeline Plot",
    "text": "Ridgeline Plot\n\nMain point:\n\nData visualization technique used to study the distribution of numeric variable for several variable\nWhen should to use it: when a variable has 3 to 4 groups or more, and you want to compare the distribution of the groups\nNote: rank them according to the pattern (e.g. highest to lowest or lowest to highest) to provide better insight\n\n\nPlotting using ggridge\nThere are 2 methods of plotting ridgeline plot:\n\ngeom_ridgeline(): take height values to draw ridgeline\ngeom_density_ridges() : estimate data density to draw ridgeline plot\n\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nCustomize Style of Ridgeline Plot\nWe can customize the color of the area under the ridgeline plot to be gradient by using geom_ridgeline_gradient() or geom_density_ridge_gradient()\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\nWe can also map out probabilities directly to the ridgeline plot using stat_density_ridges() ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#raincloud-plot",
    "title": "Hands-on Exrecise 4a",
    "section": "Raincloud Plot",
    "text": "Raincloud Plot\nMain Point:\n\nData visualization technique designed to provide clear and concise summary of distribution central tendency and spread of dataset\nIt combines boxplot, density plot and scatterplot to give better insight of data (pattern, e.g. clustering or striation)\n\nWhen to use ridgeline plot or raincloud plot ?\n\nRidgeline plot: want to compare the distribution of different groups and is interested in density pattern.\nRaincloud plot: want to show individual data point and want to emphasize on the spread and central tendency.\n\n\nPlotting using ggdist\nWe will plot using stat_halfeye() to plot the half-density, while removing the half-slab by adding these arguments .width = 0, point_colour = NA in the stat_halfeye() .\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\nNext, we will add the boxplot by adding into the graph:\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\nNext, we will add half-dotplot to show points of each data.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\nWe can also flip the graph for better readibility and add theme for better aesthetics.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-2",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n:::\n\nAdd calc_ecdf=TRUE in the stat_density_ridges()\n\nAdditionally, we can also color the ridgeline plot using quantile with geom_density_ridges_gradient() like below.\n::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-3",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-3",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n::: Instead of using quantile number like the graph above, we can also specify the quantiles into ranges like below. ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-4",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-4",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n::: ## Raincloud Plot\nMain Point:\n\nData visualization technique designed to provide clear and concise summary of distribution central tendency and spread of dataset\nIt combines boxplot, density plot and scatterplot to give better insight of data (pattern, e.g. clustering or striation)\n\nWhen to use ridgeline plot or raincloud plot ?\n\nRidgeline plot: want to compare the distribution of different groups and is interested in density pattern.\nRaincloud plot: want to show individual data point and want to emphasize on the spread and central tendency.\n\n\nPlotting using ggdist\nWe will plot using stat_halfeye() to plot the half-density, while removing the half-slab by adding these arguments .width = 0, point_colour = NA in the stat_halfeye() . ::: panel-tabset ## The graph\n\n\n\n\n\n\n\n\n\nThe code\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n:::\n\nNext, we will add the boxplot by adding into the graph: ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-6",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands_on_Ex04a.html#the-code-6",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\n\n\n\n\n\n\n\n\n::: Next, we will add half-dotplot to show points of each data. ::: panel-tabset\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\nWe can also flip the graph for better readibility and add theme for better aesthetics.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "Hands-on Exrcise 4b",
    "section": "",
    "text": "Objective of this exercise:\n\nUse ggstatsplot to create visual graphics with statistic information in the plot\nUse performance package to visualize model diagnostics\nUse parameter package to visualize params"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#bayes-factor",
    "title": "Hands-on Exrcise 4b",
    "section": "Bayes Factor:",
    "text": "Bayes Factor:\nMain point:\n\nDefinition: is a ratio that quantifies how much more likely a data is under one hypothesis over the other (\\(H_1\\) over \\(H_0\\))\nIt uses the the following formula to calculate:\nBayes Factor = \\(\\frac{P(\\text{Data} \\mid H_1)}{P(\\text{Data} \\mid H_0)}\\)\nHow to interpret the result:\n\n\n\n\n\nIf result is…\nWhat does it mean\n\n\n\n\n&gt; 100\nExtreme evidence for H1\n\n\n30 - 100\nVery strong evidence for H1\n\n\n10 - 30\nStrong evidence for H1\n\n\n3 - 10\nModerate evidence of H1\n\n\n1 - 3\nUnreliable evidence for H1\n\n\n1\nNo evidence\n\n\n0.333 - 1\nUnreliable evidence for H1\n\n\n0.333 - 0.1\nModerate evidence for H1\n\n\n0.1 - 0.0333\nStrong evidence for H1\n\n\n0.0333 - 0.001\nVery strong evidence for H1\n\n\n&lt; 0.001\nExtreme evidence for H1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "Hands-on_Ex04c",
    "section": "",
    "text": "Objective of this exercise:\n\nLearn about uncertainty\nHow to visualize uncertainty with different package (ggplot2, plotly, DT and ggdist) and different visualization techniques (i.e. error bar)\nCreate hypothetical outcome plots (HOPs) by using ungeviz package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-uncertainty-of-point-estimates-with-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-uncertainty-of-point-estimates-with-ggplot2",
    "title": "Hands-on_Ex04c",
    "section": "Visualizing Uncertainty of Point Estimates with ggplot2",
    "text": "Visualizing Uncertainty of Point Estimates with ggplot2\nPoint of estimate is a single best guess for population parameter calculated from sample data (e.g. sample mean, sample SD, etc). Though point of estimate don’t tell us how accurate the value, but it tells us how the value might vary from the true value because of sampling variability. These approach are used to express uncertainty:\n\nStandard error: standard deviation of sampling distribution\nConfidence interval: range likely to contain true value\nCredible interval: probability-based range for parameter\n\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhat’s happening in the code:\n\ngroup_by() is used in line 2 to group data by RACE\nsummarize() is used to generate the count, mean and SD of the Maths scores\nmutate() is used to derive standard error of Maths score by RACE\nthe knitr package display the tibble data frame into table"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on_Ex04c",
    "section": "Plotting Standard Error Bars of Point Estimates",
    "text": "Plotting Standard Error Bars of Point Estimates\nWe can plot error bar by using geom_errorbar() which will compute the formula of mean - standard error for bottom of error bar (ymin argument) and mean + standard error for the top error bar (ymax argument).\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on_Ex04c",
    "section": "Plotting Confidence Interval of Point Estimates",
    "text": "Plotting Confidence Interval of Point Estimates\nWe can plot the confidence interval instead of standard error like below.\n\nthe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhat’s the difference between this code and the one before:\n\nthe ymax and ymin arguments are different depending on the measure used. The code above factors in 1.96 (captures 95% of the area under the curve)\nThe code reorder(RACE, -mean) reorders the error bar by the average Maths score"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#making-point-estimates-visualization-interactive",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#making-point-estimates-visualization-interactive",
    "title": "Hands-on_Ex04c",
    "section": "Making Point Estimates Visualization Interactive",
    "text": "Making Point Estimates Visualization Interactive\nIn this example, we’ll be plotting interactive error bar with 99% confidence interval of mean Maths score by race.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\nBreak down of the code\n\n\n\n\nbscols() lays out the interactive graph created by plotly() with the table created by DT::datatable side by side.\nplotly() is used to convert the ggplot2 graph we make to interactive Plotly object.\nDT::datatable displays shared_df data into interactive table"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "When creating animation, the plot doesn’t move. Instead, individual plots are stitched together like a video. Each frame is a different plot when conveying motion, which is built using relevant subset of the aggregate data. Then the subset drives the flow of the animation when stitched back together.\n\nTerminologies in this Exercise:\n\nFrame: each frame represent different point in time or category. When the frame changes, the data point also changes which represent the updated version of data.\nAnimation Attributes: the settings that control how the animation behaves e.g. duration of each frame or which plot would be the start of animation)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#example-build-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#example-build-population-bubble-plot",
    "title": "Hands-on Exercise 3b",
    "section": "Example: Build Population Bubble Plot",
    "text": "Example: Build Population Bubble Plot\nIn this example, we’ll build a bubble plot uisng ggplot2.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-bubble-plot",
    "title": "Hands-on Exercise 3b",
    "section": "Animated Bubble Plot",
    "text": "Animated Bubble Plot\nWe can animate the plot by adding to the code:\n\ntransition_time() to create transition through the YEAR variable (animation moves as the year changes)\nease_aes() is used to control the of aesthetics. The default is linear, but we can choose from quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Hands-on Exrecise 4a",
    "section": "",
    "text": "Objective of this exercise:\n\nLearn about new graphs: ridgeline plot and raincloud plot to plot uncertainty\nUse ggridge library to plot ridgeline plot and ggdist library to plot raincloud plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#ridgeline-plot",
    "title": "Hands-on Exrecise 4a",
    "section": "Ridgeline Plot",
    "text": "Ridgeline Plot\n\nMain point:\n\nData visualization technique used to study the distribution of numeric variable for several variable\nWhen to use it: when a variable has 3 to 4 groups or more, and you want to compare the distribution of the groups\nNote: rank them according to the pattern (e.g. highest to lowest or lowest to highest) to provide better insight\n\n\nPlotting using ggridge\nThere are 2 methods of plotting ridgeline plot:\n\ngeom_ridgeline(): take height values to draw ridgeline\ngeom_density_ridges() : estimate data density to draw ridgeline plot\n\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nCustomize Style of Ridgeline Plot\nWe can customize the color of the area under the ridgeline plot to be gradient by using geom_ridgeline_gradient() or geom_density_ridge_gradient()\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\nWe can also map out probabilities directly to the ridgeline plot using stat_density_ridges()\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAdd calc_ecdf=TRUE in the stat_density_ridges()\n\n\nAdditionally, we can also color the ridgeline plot using quantile with geom_density_ridges_gradient() like below.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using quantile number like the graph above, we can also specify the quantiles into ranges like below.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-2",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n:::\n\n\n\n\n\n\nTip\n\n\n\nAdd calc_ecdf=TRUE in the stat_density_ridges()\n\n\nAdditionally, we can also color the ridgeline plot using quantile with geom_density_ridges_gradient() like below.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using quantile number like the graph above, we can also specify the quantiles into ranges like below. ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-3",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-3",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n::: Instead of using quantile number like the graph above, we can also specify the quantiles into ranges like below. ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-4",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-4",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\nRaincloud PlotThe code\n\n\nMain Point:\n\nData visualization technique designed to provide clear and concise summary of distribution central tendency and spread of dataset\nIt combines boxplot, density plot and scatterplot to give better insight of data (pattern, e.g. clustering or striation)\n\nWhen to use ridgeline plot or raincloud plot ?\n\nRidgeline plot: want to compare the distribution of different groups and is interested in density pattern.\nRaincloud plot: want to show individual data point and want to emphasize on the spread and central tendency.\n\n\nPlotting using ggdist\nWe will plot using stat_halfeye() to plot the half-density, while removing the half-slab by adding these arguments .width = 0, point_colour = NA in the stat_halfeye() . ::: panel-tabset ## The graph\n\n\n\n\n\n\n\n\n\nThe code\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n:::\n\nNext, we will add the boxplot by adding into the graph: ::: panel-tabset ## The graph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: Next, we will add half-dotplot to show points of each data. ::: panel-tabset\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\nWe can also flip the graph for better readibility and add theme for better aesthetics.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nReference\n\nRidgeline Plots: An Underrated Gem of Data Visualisation\nRidgeline plot\nOnline Statistics Calculator"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-6",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-6",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n:::\nNext, we will add half-dotplot to show points of each data. ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#raincloud-plot",
    "title": "Hands-on Exrecise 4a",
    "section": "Raincloud Plot",
    "text": "Raincloud Plot\nMain Point:\n\nData visualization technique designed to provide clear and concise summary of distribution central tendency and spread of dataset\nIt combines boxplot, density plot and scatterplot to give better insight of data (pattern, e.g. clustering or striation)\n\n\n\n\n\n\n\nTip\n\n\n\nWhen to use ridgeline plot or raincloud plot ?\n\nRidgeline plot: want to compare the distribution of different groups and is interested in density pattern.\nRaincloud plot: want to show individual data point and want to emphasize on the spread and central tendency.\n\n\n\n\nPlotting using ggdist\nWe will plot using stat_halfeye() to plot the half-density, while removing the half-slab by adding these arguments .width = 0, point_colour = NA in the stat_halfeye() .\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\nNext, we will add the boxplot by adding into the graph:\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\nNext, we will add half-dotplot to show points of each data.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\nWe can also flip the graph for better readibility and add theme for better aesthetics.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-5",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-5",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n:::\nNext, we will add the boxplot by adding into the graph: ::: panel-tabset ## The graph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-7",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-7",
    "title": "Hands-on Exrecise 4a",
    "section": "The code",
    "text": "The code\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n:::\nWe can also flip the graph for better readibility and add theme for better aesthetics.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#exploring-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#exploring-ggdist-package",
    "title": "Hands-on_Ex04c",
    "section": "Exploring ggdist Package",
    "text": "Exploring ggdist Package\n\nggdist package is deisgned to visualize distribution and uncertainty from ggplot2 geoms and stats\nIt’s designed for frequentist and Bayesian uncertainty visualization, which are the frameworks used to answer how uncertain are we of the data. Both view that uncertainty visualization can be unified through perspective fo distribution visualization.\n\nFrequentist uncertainty: assume that probabilities are objective and fixed. Confidence distribution or bootstrap distribution are used to visualize the model\nBayesian uncertainty: assume that probability change based on new information. Probability distribution is used to visualize bayesian uncertainty"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualize-uncertainty-of-point-estimate-using-ggdist",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualize-uncertainty-of-point-estimate-using-ggdist",
    "title": "Hands-on_Ex04c",
    "section": "Visualize Uncertainty of Point Estimate using ggdist",
    "text": "Visualize Uncertainty of Point Estimate using ggdist\nIn this example, we use &lt;a href=\"https://mjskay.github.io/ggdist/\"&gt;stats_pointinterval() to display distribution of Maths score by race.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;% ggplot(aes(x = RACE, y = MATHS)) + \n  stat_pointinterval() + \n  labs( title = \"Visualising confidence intervals of mean math score\", subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nWe can visualize with different confidence interval, central tendency and interval type like below.\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n.width = 0.95 will plot a 95% interval (a range which 95% of the distribution lies)\n.point = median as central tendency\n.interval = qi sets the type of interval to quantile interval\n\n\nAlternatively, we can also plot multiple interval like below (95% and 99% interval)\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = c(0.95, 0.99),\n    show.legend = FALSE\n  ) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\"\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#the-code",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#the-code",
    "title": "Hands-on_Ex04c",
    "section": "The code",
    "text": "The code\n\nexam %&gt;% ggplot(aes(x = RACE, y = MATHS)) + stat_pointinterval() + labs( title = \"Visualising confidence intervals of mean math score\", subtitle = \"Mean Point + Multiple-interval plot\")\n\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#customizing-style-of-ggdist-visualization",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#customizing-style-of-ggdist-visualization",
    "title": "Hands-on_Ex04c",
    "section": "Customizing Style of ggdist visualization",
    "text": "Customizing Style of ggdist visualization\nWe can change the style fo visualization by using stat_gradientinterval() like below\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-uncertainty-using-hypothetical-outcome-plots-hops-using-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-uncertainty-using-hypothetical-outcome-plots-hops-using-ungeviz-package",
    "title": "Hands-on_Ex04c",
    "section": "Visualizing Uncertainty using Hypothetical Outcome Plots (HOPs) using ungeviz package",
    "text": "Visualizing Uncertainty using Hypothetical Outcome Plots (HOPs) using ungeviz package\n\nInstall and launch package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nlibrary(ungeviz)\n\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "Getting Started\nObjective of this exercise:\n\nLearn about funnel plots\nplotting funnel plots by using funnelPlotR package\nplotting static funnel plot by using ggplot2 package\nplotting interactive funnel plot by using both plotly R and ggplot2\n\n\n\nImport Libraries\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\nIn this exercise, we’ll be using the following libraries:\n\nplotly\ntidyverse\nFunnelPlotR: draws funnel plots using ggplot2\nknitr: used for dynamic report generation\n\n\n\nImport Data\nIn this exercise data from Open Data Covid-19 Provinsi DKI Jakarta portal. We’ll be comparing the cumulative COVID-19 cases and death by sub-district (kelurahan).\n\ncovid19 &lt;- read_csv(\"COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\nNote\n\n\n\nWhat does the code do:\n\n%&gt;% passes the tibble to the next function\nmutate_if(is.character, as.factor) line of code checks every column if it’s character data type. If it is, it will be stored as integer with labels (or categorical variable)\n\n\n\n\n\nFunnelPlotR Package\nFunnelPlotR uses ggplot to create funnel plot. The essential arguments are: numerator (event of interest), denominator (population to be considered) and group. The package has the following arguments that can be customized:\n\nlimit : specifies confidence limits for funnel plot (95 or 99)\nlabel_outliers : label outliers (true or false)\nPoisson_limits : add poisson limit to the plot\nOD_adjust : add overdispersed limit to the plot, which inflates the control limits\nxrange and yrange : specify range to display for each axes\nAesthetic component\n\n\n\n\n\n\n\nWhat is a funnel plot ?\n\n\n\n\nWhen we visualize uncertainty, we’ll always be dealing with variation (dealing with multiple occurrences and determine what and how they differ)\nTwo types of variation:\n\nNoise: they are completely random (unknown reasons)\nSignal: they are not totally random and can point to underlying causes that can be insightful (to improve)\n\nThis is where funnel plot comes in! Funnel plot can help us to determine if a data point is noise or signal\n\n\n\n\n\nFunnel Plot using FunnelPlotR\nThe example uses creates funnel plot grouped by sub-district and uses standardized ratio (comapre observed performance agaianst expected) as default plot type.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnelPlotR Makeover\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),   \n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",          \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nWhat does this code do\n\n\n\n\ndata_type = \"PR\" : refers to plotting a proportion ratio plot (used to visualize proportion of percentage of events to compare how different groups perform compared o percentage fo events)\nx_range : sets range of value for x-axis\ny_range : sets range of value for y-axis\nlabel = NA : used to remove default label outliers feature\n\n\n\n\n\nFunnel Plot using ggplot2\nIn this example, we want to create funnel plot that plots the cumulative fatality rate by cumulative number of cases.\nFirst, we derive the cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nThen we compute the weighted mean.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\nNext, we compute the lower and upper limit for 95% and 99% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\nNow, we can plot the funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\nCreate Interactive Funnel Plot using plotly and ggplot2\nWe can make the plot above interactive by using ggplotly()\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "",
    "text": "Objective of this exercise:\n\nReview a classmate’s Take-home Exercise 1 in which I chose to review Yuan Yihao’s work\nCritique the good design principles used in their visualization\nCreate makeover version of chosen visualization"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#import-libraries-for-makeover",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#import-libraries-for-makeover",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "3.1 Import Libraries for Makeover",
    "text": "3.1 Import Libraries for Makeover\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#makeover-version-of-population-by-age-group-and-planning-area-analyze-the-aging-population-in-each-region",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#makeover-version-of-population-by-age-group-and-planning-area-analyze-the-aging-population-in-each-region",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "3.3 Makeover Version of Population by Age Group and Planning Area (Analyze the Aging Population in Each Region)",
    "text": "3.3 Makeover Version of Population by Age Group and Planning Area (Analyze the Aging Population in Each Region)\nThis graph compares the number of population by its age group from each planning area. The age group is separated into 3: Under age (aged 0 - 20), Adult (aged 21 - 60) and Aging (aged 61 above). The main objective of the graph is to analyze the number of aging population in each region.\nMy approach to the makeover:\n\nSimilar like the previous visualization, I would change the chart type from bar chart to stacked bar chart. Since we want to compare values from different groups (aging, adult and under age), it is easier to see compare the difference between groups with stacked bar chart.\nChange the x-axis from count of population to percentage. Though we could see some planning area have high number of aging population, but it’s difficult to see the name of the planning area due to it being zoomed out to accommodate the range of the number of population in the x-axis.\n\n\n  res_data_grouped &lt;- res_data %&gt;% # group population into age groups \n  mutate(AgeGroup = case_when(\n        Age &gt;= 0 & Age &lt;= 20 ~ \"Under Age\",\n        Age &gt;= 21 & Age &lt;= 60 ~ \"Adult\",\n        Age &gt;= 61 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Percentage = Pop / sum(Pop) * 100) # convert frequency into percentage\n\n\n  aging_order &lt;- res_data_grouped %&gt;% # reorder PA by the highest aging population\n  filter(AgeGroup == \"Aging\") %&gt;%\n  arrange(desc(Percentage)) %&gt;%\n  pull(PA)\n  res_data_grouped$PA &lt;- factor(res_data_grouped$PA, levels = aging_order) # convert PA into an ordered factor\n\n\n# plot stacked bar chart\n  ggplot(res_data_grouped, aes(x = PA, y = Percentage, fill = AgeGroup)) +\n  geom_col(position = \"stack\") +\n  labs(\n        title = \"Age Group Distribution by Planning Area (in Percentage)\",\n        x = \"Planning Area\",\n        y = \"Percentage (%)\"\n      ) +\n  scale_fill_manual(values = c(\"Under Age\" = \"#e3dfde\", \"Adult\" = \"#ccc6c4\", \"Aging\" = \"#DB4437\")) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\n\nThe planning area with highest aging population are: Outram, Ang Mo Kio, Jurong East, Bukit Merah and Rochor\nInterestingly, there are planning area where there are no aging groups (i.e. Museum and Seletar)\nThere are also some planning area that no Singapore residents live in: Boon Lay, Central Water Catchment, Changi Bay, etc.\nOverall, roughly about 50% of the population in each planning area are made up of adults (working people)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#background",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "",
    "text": "Objective of this exercise:\n\nReview a classmate’s Take-home Exercise 1 in which I chose to review Yuan Yihao’s work\nCritique the good design principles used in their visualization\nCreate makeover version of chosen visualization"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#good-design-principles-used-in-visualization",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#good-design-principles-used-in-visualization",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "2. Good Design Principles Used in Visualization",
    "text": "2. Good Design Principles Used in Visualization\nThere are 3 visualization are created as the following:\nPopulation by Age and Sex\n\n\n\n\n\n\n\n\n\nPopulation by Age Group and Planning Area (Analyze the Aging Population in Each Region)\n\n\n\n\n\n\n\n\n\nAging-to-Under-Age Population Ratio by Planning Area\n\n\n\n\n\n\n\n\n\nDesign principles implemented:\n\nEach graph has good color schemes, the colors between genders contrast each other that it’s easy to distinguish between genders\nThe usage of muted color in the Population by Age and Sex chart is helpful to highlight distribution of sex within the population\nThe graph is clearly labeled in the x-axis, y-axis, title and legend - good explanation (legends) to help reader understand the context of the graph\nPopulation by Age Group and Planning Area has uses ordering visualization principle to highlight the planning area that has the highest aging population to lowest."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#makeover-version-of-chosen-visualization",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#makeover-version-of-chosen-visualization",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "3. Makeover Version of Chosen Visualization",
    "text": "3. Makeover Version of Chosen Visualization"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#makeover-version-of-population-by-population-by-age-and-sex",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_pt2.html#makeover-version-of-population-by-population-by-age-and-sex",
    "title": "Take-home Exercise 1 (Phase 2)",
    "section": "3.2 Makeover Version of Population by Population by Age and Sex",
    "text": "3.2 Makeover Version of Population by Population by Age and Sex\nThe graph is supposed to compare the number of population between genders and age (e.g. the number female is greater than male at the age 50, then the number of female population will be subtracted by the male population and a bar chart will be plotted). However, if we look at the graph at a glance, it might look like a distribution of the population between genders based on age chart instead.\nMy approach to the makeover:\n\nChange the chart type from bar chart to stacked bar chart. Though we could easily understand the which gender population is much more prominent in each age, but it isn’t straight-forward. Since we want to compare the number of population between gender and age and which gender is more dominant in each age, stacked bar chart might be a better approach to compare between gender.\nChange the y-axis from count of population to percentage since the focus of the graph is to compare and show difference between genders. Additionally, percentage makes the difference much more visible and easier to compare than raw values.\nUse similar idea of “fading content that is not relevant” by fading the gender that has lower percentage.\n\n\ngrouped_data &lt;- res_data %&gt;% # group population based on age and sex\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(Age) %&gt;%\n  mutate(Percent = Pop / sum(Pop) * 100, # convert count into percentage\n         is_dominant = Pop == max(Pop))  # flags if gender has higher number\n\n\nggplot(grouped_data, aes(x = Age, y = Percent, fill = Sex, alpha = is_dominant, # transparency for gender that has lower percentage\n                         width=0.6)) +\n  geom_col(position = \"stack\") + # visualize stacked bar chart\n  scale_alpha_manual(values = c(\"TRUE\" = 1, \"FALSE\" = 0.4), guide = \"none\") +  labs(\n    title = \"Age-Sex Population Structure (in Percentage)\",\n    x = \"Age\",\n    y = \"Percentage (%)\"\n  )  +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInisght\n\n\n\n\nThe population have roughly similar number of male and female population from age 0 - 27. However, the male population is still slightly higher in number than female.\nFrom age 28 above, the population is dominated by female. The trend seems go higher as the age increases."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Objective of this exercise:\n\nHow to model, analyze and visualize network\ncreate graph object data frame, manipulate them using dplyr, lubridate and tidygraph\nbuild network graph visualization using appropriate function of ggraph\ncompute network geometrics using tidygraph\nbuild advanced graph visualization by adding network geometrics\nBuild interactive network visualization using visNetwork"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Objective of this exercise:\n\nHow to model, analyze and visualize network\ncreate graph object data frame, manipulate them using dplyr, lubridate and tidygraph\nbuild network graph visualization using appropriate function of ggraph\ncompute network geometrics using tidygraph\nbuild advanced graph visualization by adding network geometrics\nBuild interactive network visualization using visNetwork"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-libraries",
    "title": "Hands-on Exercise 5",
    "section": "Import Libraries",
    "text": "Import Libraries\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)\n\nThe libraries used in this exercise would be:\n\nigraph: provides function for generating random and regular graphs, graph visualization, centrality methods, etc\ntidygraph: an entry unto the tidyverse that provides a tidy framework for all things relational (network, graph, trees, etc)\nggraph\nvisNetwork: package for network visualization using vis.js (a JS library)\nlubridate: makes it easier working with dates and times\nclock: R package to work with date-times\ntidyverse\ngraphlayouts: additional layout algorithm for network visualization\nconcaveman: the concavemean function ports concaveman library from mapbox and computes the concave polygon for one or several set of points.\nggforce: provide missing functionality ggplot2 through extension introduced with ggplotv2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-data",
    "title": "Hands-on Exercise 5",
    "section": "Import Data",
    "text": "Import Data\nIn thsi exercise, we’ll be using two dataset, the node data and the link data. The datasets are from oil exploration and extraction company. The edge dataset contain two weeks of 9063 emails correspondence between 55 employees, whereas the nodes dataset consist of names, department and title of employees.\n\nGAStech_nodes &lt;- read_csv(\"GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#review-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#review-data",
    "title": "Hands-on Exercise 5",
    "section": "Review Data",
    "text": "Review Data\nNext, we checl for the structure of the data frame using glimpse() to show us a snippet of the values in each columns.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-wrangling",
    "title": "Hands-on Exercise 5",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nAs seen above, the sentDate variable is in character data type instead of date data type. So we want to change the data type.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nNote\n\n\n\n\ndmy and wday functions are from the lubidate package\ndmy transform SentDate to date data type\nwday the day of the week as decimal number if label is TRUE, but returns name of the day if label is FALSE. This function create a new column in the data frame.\n\n\n\nNext, we will check the make sure the created variable has the right data type and data.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\nHowever, since the data frame reveals that it consist of individual e-mail flow record, it may not be useful for visualization. So we want to aggregate the individual by date sent, senders, receiver, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\n\nfilter(MainSubject == \"Work related\") filters and keep rows that is work related and group them by source, target and weekday\nsummarise(Weight = n()) takes each unique group and count number of rows there is and assign them to Weight\nfilter(source != target) removes rows where source and target are the same person, while filter(Weight &gt; 1) only keeps interaction that happened more than once on the same weekday\nungroup() removes the grouping\n\n\n\nTime to check the GAStech_edges_aggregated dataframe.\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#create-network-object-with-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#create-network-object-with-tidygraph",
    "title": "Hands-on Exercise 5",
    "section": "Create network object with tidygraph",
    "text": "Create network object with tidygraph\ntidygraph package can be used to create network objects, such as:\n\ntbl_graph : creates a tbl_graph network from nodes and edges data\nas_tbl_graph() : convert network data and object into tbl_graph network. The following are the network data and object supported by this function:\n\na node data.frame and an edge data.frame\ndata.frame, list, matrix from base\nigraph from igraph\nnetwork from network\ndendrogram and hclust from stats\nNode from data.tree\nphylo and evonet from ape\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)\n\n\n\nUsing tbl_graph() to build data model\nCreate tbl_graph of tinygraph to build tidygraph’s network graph datafarme\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe tbl_graph consist of 54 nodes and 1372 edges\nThe Node data is active, this means that it’s possible to manipulate the data in one tibble at a time\n\n\n\nChange the active object\nThe nodes in the tibble data frame is active by default, but we can change which tibble data frame is active with the activate() function. If we wanted to rearrange the rows in the edges tibble to list with highest weight, we can use activate() and arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nPlot Static Network Graph with ggraph\nThere are 3 main ascept to ggrpah’s network graph, such as:\n\nnodes\nedges\nlayouts: vertical and horizontal placement fo nodes when plotting particular graph structure\nIn this example, we’ll use geom-edge_link() and geom_node_point() to plot a network using GAStech_graph\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#customize-the-style-of-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#customize-the-style-of-graph",
    "title": "Hands-on Exercise 5",
    "section": "Customize the Style of Graph",
    "text": "Customize the Style of Graph\n\nUsing Theme\nIn this example, we can use theme to remove x and y-axes by using theme_graph() .\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nBut apart from that, we can also use theme_graph() to remove grids, border or font. Additionally, we can also change the color of the plot by adding colour = argument like below:\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\nggraph Layout\nggraph supports different standard layouts such as star, circle, nicelt (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. The below shows layouts supported by ggraph.\n\n\nFruchterman and Reingold Layout\nIn this example, we’ll be creating network graph using Fruchterman and Reingold layout (done by adding layout = \"fr\" in argument in ggraph)\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modify-network-node",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modify-network-node",
    "title": "Hands-on Exercise 5",
    "section": "Modify Network Node",
    "text": "Modify Network Node\nIn this example, we’ll color the node by their departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nWe added colour = Department ingeom_node_point(aes())"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modify-network-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modify-network-edges",
    "title": "Hands-on Exercise 5",
    "section": "Modify Network Edges",
    "text": "Modify Network Edges\nIn this example, we’ll change the thickness of the edges by adding Weights.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nSimilar to modifying the network node, we can add arguments into the geom_edge_link() to add weights to the edges."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "title": "Hands-on Exercise 5",
    "section": "Creating facet graphs",
    "text": "Creating facet graphs\nIn data visualization, facet is used to reduce edge over-plotting by spreading nodes and edges out based on their attributes. There are three functions in ggraph to implement faceting:\n\nfacet_nodes(): edges are only drawn in panel if both terminal are present\nfacet_edges(): nodes are always drawn in all panels even if node data contains an attribute named the same as the one used for edge facetting\nfacet_graph(): faceting on two variables simultaneously\n\n\nWorking with facet_edges()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\nWe also can change the position of the legend like below:\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\nAdditionally, we can also frame each graph like below:\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "title": "Hands-on Exercise 5",
    "section": "Working with facet_nodes()",
    "text": "Working with facet_nodes()\nIn this example, we used facet_nodes()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metric-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metric-analysis",
    "title": "Hands-on Exercise 5",
    "section": "Network Metric Analysis",
    "text": "Network Metric Analysis\n\nComputing Centrality Indices\nCentrality measures are collection of statistical indices used to describe relative importance of the actors are to a network. There are 4 types of cenrality measures:\n\nDegree: how many connection a node has\nBetweenness: centrality measure of vertex within a graph (high betweenness = bridge or bottleneck in a network or have shortest path to reach the other node)\nCloseness: vertices that have shorter distance to other vertices have higher closeness (shortest path has higher centrality)\nEigenvector: measure of the importance of a node in a network (the value of your connection affects your own value)\nIn this example, we’ll be usig the betweeness centrality.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-network-metrics",
    "title": "Hands-on Exercise 5",
    "section": "Visualizing Network Metrics",
    "text": "Visualizing Network Metrics\nFrom ggraph v2.0 onward tidygraph algorithms, such as centrality measures can be accessed directly in ggraph calls, so it’s no longer necessary to precompute and store derived node and edge centrality measures.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-community",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualizing-community",
    "title": "Hands-on Exercise 5",
    "section": "Visualizing Community",
    "text": "Visualizing Community\ntidygraph package inherit many community detection algorithms imbedded into igraph and it is made available to us, incl. edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). In this example, the group_edge_betweenness().\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nTo support effective visual investigation the community network has been revised by using geom_mark_hull() of ggforce.\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#build-interactive-network-graph-using-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#build-interactive-network-graph-using-visnetwork",
    "title": "Hands-on Exercise 5",
    "section": "Build Interactive Network Graph using visNetwork",
    "text": "Build Interactive Network Graph using visNetwork\nvisNetwork() function uses a nodes list and edges list and create interactive graph. But nodes list must include an “id” column and the edge list must have “from” and “to” column. The function also pots the label for the nodes, using the names of the actors from “label” column.\n\nData Prep Steps\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\n\nleft_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\"))match email’s sender to their id in the node table and rename(from = id) add column id and renamed it to from\nfilter(MainSubject == \"Work related\") filters out emails that are not work-related\ngroup_by(from, to) %&gt;% summarise(weight = n()) count how many emails were sent fro each sender-reciever\nfilter(weight &gt; 1) keeps only relationship of people who emailed each other more than once\n\n\n\n\n\nCreate Interactive Network Graph\nNow, we plot the graph.\n\nvisNetwork(GAStech_nodes, \n GAStech_edges_aggregated)\n\n\n\n\n\nIn this example, we’ll use Fruchterman and Reingold layout.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes-nodes",
    "title": "Hands-on Exercise 5",
    "section": "Working with Visual Attributes (Nodes)",
    "text": "Working with Visual Attributes (Nodes)\nIn this example, we want to group the data based on department, wich visNetwork looks for “field” in node object and color the node according to the value in the group field. In this example, we’ll change the Department field to group.\nThen visNetwork shades the node by assigning unique color to each category in group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes-edges",
    "title": "Hands-on Exercise 5",
    "section": "Working with Visual Attributes (Edges)",
    "text": "Working with Visual Attributes (Edges)\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nWhat the code does\n\n\n\n\nvisEdges() is used to symbolize the edges\narrows is used to define where to place the arrow\nsmooth is used to plot the edges using a smooth curve"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "title": "Hands-on Exercise 5",
    "section": "Interactivity",
    "text": "Interactivity\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\nWhat the code does\n\n\n\n\nvisoptions() is used to symbolize the edges\nhighlightNearest highlight nearest when clicking a node\nnodesIdSelection adds an id node selection by creating HTML select element"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Over the past decade, the community of Oceanus has undergone transformations and challenges evolving from its fishing-centric origins. (there used to be illegal fishing but now these ppl has shifting on to another investment e.g. ocean tourism industry which makes a growing tension.) with teh growing tourism, it attracted interntaional pop star Sailor Shift (who wanted to shoot his/her new mv in the island).\n\nClepper Jensen is a former analyst at FishEye company who is new a seasoned journalist for Hecklee Herald, is observing the tension and recently looking at temporary closure of Nemo Reef. By using investigative tools and radio communication, he uncovered a complex web of expedited approvals and secretive logistics -&gt; this reveals story involving high-level Oceanus officials, Sailor Shift’s team, local influential families adn local conservationist group (the Green Guardians) - this is a story of corruption and manipulation.\nYour task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story.\n\n\nObjective of this exercise:\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following questions.\n\nClepper has noticed that people often communicate with (or about) the same people or vessels, and that grouping them together may help with the investigation.\n\nUse visual analytics to help Clepper understand and explore the interactions and relationships between vessels and people in the knowledge graph.\nAre there groups that are more closely associated? If so, what are the topic areas that are predominant for each group?\n\nFor example, these groupings could be related to: Environmentalism (known associates of Green Guardians), Sailor Shift, and fishing/leisure vessels.\n\n\nClepper suspects that Nadia Conti, who was formerly entangled in an illegal fishing scheme, may have continued illicit activity within Oceanus\n\nThrough visual analytics, provide evidence that Nadia is, or is not, doing something illegal\nSummarize Nadia’s actions visually. Are Clepper’s suspicions justified?\n\n\n\n\n\n\n\n\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, knitr)\n\nThe libraries used in this exercise are the following:\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\njsonlite\nConvert JSON data to R objects\n\n\ntidyverse\nProvide key data transformation functions\n\n\nSmartEDA\nHelp in getting the complete exploratory data analysis by running the function instead of writing long R codes\n\n\ntidygraph\nProvides tidy API for network or graph manipulation\n\n\nggraph\nExtension of the ggplot2 API tailored to graph visualizations\n\n\nknitr\nProvides a tool for dynamic report generation\n\n\n\n\n\n\ntidyverse\njsonlite: convert JSON data to R objects\nSmartEDA: help in getting the complete exploratory data analysis by running the function instead of writing long R codes.\ntidygraph\nggraph\n\n\n\n\nIn this exercise, we’ll be using the mc3.json file and extract data using the jsonlite library.\n\nMC3 &lt;- fromJSON(\"data/MC3_graph.json\")\nMC3_schema &lt;- fromJSON(\"data/MC3_schema.json\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Over the past decade, the community of Oceanus has undergone transformations and challenges evolving from its fishing-centric origins. (there used to be illegal fishing but now these ppl has shifting on to another investment e.g. ocean tourism industry which makes a growing tension.) with teh growing tourism, it attracted interntaional pop star Sailor Shift (who wanted to shoot his/her new mv in the island).\n\nClepper Jensen is a former analyst at FishEye company who is new a seasoned journalist for Hecklee Herald, is observing the tension and recently looking at temporary closure of Nemo Reef. By using investigative tools and radio communication, he uncovered a complex web of expedited approvals and secretive logistics -&gt; this reveals story involving high-level Oceanus officials, Sailor Shift’s team, local influential families adn local conservationist group (the Green Guardians) - this is a story of corruption and manipulation.\nYour task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story.\n\n\nObjective of this exercise:\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following questions.\n\nClepper has noticed that people often communicate with (or about) the same people or vessels, and that grouping them together may help with the investigation.\n\nUse visual analytics to help Clepper understand and explore the interactions and relationships between vessels and people in the knowledge graph.\nAre there groups that are more closely associated? If so, what are the topic areas that are predominant for each group?\n\nFor example, these groupings could be related to: Environmentalism (known associates of Green Guardians), Sailor Shift, and fishing/leisure vessels.\n\n\nClepper suspects that Nadia Conti, who was formerly entangled in an illegal fishing scheme, may have continued illicit activity within Oceanus\n\nThrough visual analytics, provide evidence that Nadia is, or is not, doing something illegal\nSummarize Nadia’s actions visually. Are Clepper’s suspicions justified?\n\n\n\n\n\n\n\n\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, knitr)\n\nThe libraries used in this exercise are the following:\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\njsonlite\nConvert JSON data to R objects\n\n\ntidyverse\nProvide key data transformation functions\n\n\nSmartEDA\nHelp in getting the complete exploratory data analysis by running the function instead of writing long R codes\n\n\ntidygraph\nProvides tidy API for network or graph manipulation\n\n\nggraph\nExtension of the ggplot2 API tailored to graph visualizations\n\n\nknitr\nProvides a tool for dynamic report generation\n\n\n\n\n\n\ntidyverse\njsonlite: convert JSON data to R objects\nSmartEDA: help in getting the complete exploratory data analysis by running the function instead of writing long R codes.\ntidygraph\nggraph\n\n\n\n\nIn this exercise, we’ll be using the mc3.json file and extract data using the jsonlite library.\n\nMC3 &lt;- fromJSON(\"data/MC3_graph.json\")\nMC3_schema &lt;- fromJSON(\"data/MC3_schema.json\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on_Ex06",
    "section": "",
    "text": "Objective of this exercise:\n\nPlot calender heatmap using ggplot2\nPlot cycle plot using ggplot2\nPlot slopegraph\nPlot horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on_Ex06",
    "section": "",
    "text": "Objective of this exercise:\n\nPlot calender heatmap using ggplot2\nPlot cycle plot using ggplot2\nPlot slopegraph\nPlot horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-libraries",
    "title": "Hands-on_Ex06",
    "section": "Import Libraries",
    "text": "Import Libraries\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\nThe libraries used in this exercise would be:\n\nscales\nviridis: color maps that are designed to improve graph readability\nlubridate\nggthemes\ngridExtra: provide user-level functions to work with “grid” graphics and arrange multiple grid-based plots ona page\nreadxl: read Excel files\nknitr\ndata.table: extension of data.frame, which can aggregate large data (100 GB in RAM), orderd joins, add or modify or delete columns\nCGPFunctions\nggHoriPlot: allows user to build horisonplot\ntidyverse"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-data",
    "title": "Hands-on_Ex06",
    "section": "Import Data",
    "text": "Import Data\nIn this exercise, we’ll be using data file that consist of 199K rows of time-series cyber attack records by country.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "title": "Hands-on_Ex06",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe’ll be deriving weekday and hour of day columns.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nWhat does this code do\n\n\n\n\n...function(ts, sc, tz) : defines function using ts, sc and tz as inputs to the function\nymd_hms(ts,tz = tz[1], quiet = TRUE) : convert ts into proper datetime object using ymd_hms() from lubridate library\ntz =tz[1] : set timezone\nquiet = TRUE : suppress warning for parsing failure\ndt table is then created using data.table library with transformed columns\n\n\n\nNext, we’ll be creating attacks tibble data\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nWhat does the code do\n\n\n\n\nweekday_levels : define custom order for weekdays\ndo(make)hr_weekday... : run the function created previously and return data.table with timestamp, source_country and tz as columns\nmutate(...) in the last line: convert wkday and hour into factor data type\n\n\n\nThis is the table after processing\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-structure-of-dataset",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-structure-of-dataset",
    "title": "Hands-on_Ex06",
    "section": "Data Structure of Dataset",
    "text": "Data Structure of Dataset\nFirst, we’ll check the structure of data frame before analysis using kable.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThe data frame consist of 3 columns:\n\ntimestamp: contain the date-time value in POSIXct format\nsource_country: contain country source of attack\ntz: contain the timezone fo the source of IP address"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#build-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#build-calendar-heatmap",
    "title": "Hands-on_Ex06",
    "section": "Build Calendar Heatmap",
    "text": "Build Calendar Heatmap\nICalendar heatmap is used to display time based data using calendar layout, every day represent a day and color based on the value. In this example, we’ll be building calender heatmap to visualize the cyber attacks occurred in each hour of the day.\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant points of this code\n\n\n\n\ngrouped variable counts the number of rows with different combination of weekday and hour and remove the grouping and remove missing values (using na.omit())\nPlots the heatmap with geom_tile() and coord_equal() to plot square-shaped tiles\n\n\n\nCreate Multiple Calendar Heatmaps\nIn this example, we’ll be visualizing calendar heatmaps for top 4 countries with highest cyber attack. First, we’ll derive attack by country by:\n\nCount the number of attacks by country\nCalculate the percentage of attacks by country\nSort the records by descending order by highest number of attacks\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nNext, we’ll prepare the tidy data frame and extract attack records of the top 4 countries from attacks data frame and save it in a tibble data frame called top4_attacks.\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nLastly, we’ll be plotting the"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on_Ex06",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\n\nImport Data\nIn this exercise, we’ll be using data file that consist of 199K rows of time-series cyber attack records by country.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\nData Structure of Dataset\nFirst, we’ll check the structure of data frame before analysis using kable.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThe data frame consist of 3 columns:\n\ntimestamp: contain the date-time value in POSIXct format\nsource_country: contain country source of attack\ntz: contain the timezone fo the source of IP address\n\n\n\nData Preparation\nWe’ll be deriving weekday and hour of day columns.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nWhat does this code do\n\n\n\n\n...function(ts, sc, tz) : defines function using ts, sc and tz as inputs to the function\nymd_hms(ts,tz = tz[1], quiet = TRUE) : convert ts into proper datetime object using ymd_hms() from lubridate library\ntz =tz[1] : set timezone\nquiet = TRUE : suppress warning for parsing failure\ndt table is then created using data.table library with transformed columns\n\n\n\nNext, we’ll be creating attacks tibble data\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nWhat does the code do\n\n\n\n\nweekday_levels : define custom order for weekdays\ndo(make)hr_weekday... : run the function created previously and return data.table with timestamp, source_country and tz as columns\nmutate(...) in the last line: convert wkday and hour into factor data type\n\n\n\nThis is the table after processing\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuild Calendar Heatmap\nCalendar heatmap is used to display time based data using calendar layout, every day represent a day and color based on the value. In this example, we’ll be building calender heatmap to visualize the cyber attacks occurred in each hour of the day.\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant points of this code\n\n\n\n\ngrouped variable counts the number of rows with different combination of weekday and hour and remove the grouping and remove missing values (using na.omit())\nPlots the heatmap with geom_tile() and coord_equal() to plot square-shaped tiles\n\n\n\n\n\nCreate Multiple Calendar Heatmaps\nIn this example, we’ll be visualizing calendar heatmaps for top 4 countries with highest cyber attack. First, we’ll derive attack by country by:\n\nCount the number of attacks by country\nCalculate the percentage of attacks by country\nSort the records by descending order by highest number of attacks\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nNext, we’ll prepare the tidy data frame and extract attack records of the top 4 countries from attacks data frame and save it in a tibble data frame called top4_attacks.\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nLastly, we’ll be plotting the heatmaps side by side by using facet_wrap() .\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on_Ex06",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\n\nImport Data\nIn this example, we’ll be using dataset of arrival by air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nData Structure of Dataset\nFirst, we’ll check the structure of data frame before analysis using kable.\n\nkable(head(air))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonth-Year\nRepublic of South Africa\nCanada\nUSA\nBangladesh\nBrunei\nChina\nHong Kong SAR (China)\nIndia\nIndonesia\nJapan\nSouth Korea\nKuwait\nMalaysia\nMyanmar\nPakistan\nPhilippines\nSaudi Arabia\nSri Lanka\nTaiwan\nThailand\nUnited Arab Emirates\nVietnam\nBelgium & Luxembourg\nCIS\nFinland\nFrance\nGermany\nIreland\nItaly\nNetherlands\nSpain\nSwitzerland\nUnited Kingdom\nAustralia\nNew Zealand\n\n\n\n\n2000-01-01\n3291\n5545\n25906\n2883\n3749\n33895\n13692\n19235\n65151\n59288\n21457\n507\n27472\n1177\n2150\n8404\n1312\n3922\n15766\n12048\n1318\n1527\n1434\n2703\n1634\n4752\n12739\n1292\n3544\n4962\n925\n3731\n28986\n34616\n5034\n\n\n2000-02-01\n2357\n6120\n28262\n2469\n3236\n34344\n19870\n18975\n37105\n58188\n19634\n199\n29084\n1161\n2496\n9128\n623\n3988\n24861\n12745\n899\n2269\n1596\n1182\n1297\n6391\n13093\n1200\n2897\n5054\n747\n3980\n35148\n26030\n3938\n\n\n2000-03-01\n4036\n6255\n30439\n2904\n3342\n27053\n17086\n21049\n44205\n74426\n20719\n386\n30504\n1355\n2429\n11691\n1578\n4259\n18767\n16971\n1474\n2034\n1548\n1088\n1220\n5528\n13645\n1368\n2717\n4950\n935\n3576\n36117\n31119\n4668\n\n\n2000-04-01\n4241\n4521\n25378\n2843\n5117\n30464\n22346\n26160\n45480\n49985\n17489\n221\n34478\n1593\n2711\n14141\n705\n6579\n22735\n20397\n1284\n2420\n1592\n1012\n1208\n5544\n13366\n1345\n2512\n4149\n941\n3850\n33792\n34824\n6890\n\n\n2000-05-01\n2841\n3914\n26163\n2793\n4152\n30775\n16357\n35869\n38350\n48937\n19398\n164\n34795\n1397\n2594\n13305\n679\n4625\n18399\n15769\n1042\n1833\n1167\n660\n743\n4225\n10878\n1067\n2205\n3643\n764\n3025\n23377\n33139\n7006\n\n\n2000-06-01\n2776\n3487\n28179\n3146\n5018\n26720\n18133\n31314\n47982\n53798\n17522\n440\n34660\n1715\n2924\n10555\n2749\n4740\n21042\n17217\n1545\n2480\n1170\n712\n982\n4047\n9054\n1363\n2196\n3544\n855\n2580\n21769\n35731\n7634\n\n\n\n\n\n\n\nData Preparation\nWe’ll create two new columns called month and year which are derived from Month-year column\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\nNext, we’ll extract data for the target country we want.\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\nThen, we’ll compute year average arrivals using group_by() and summarise() .\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nPlotting the cycle plot\nNext, we’ll be plotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on_Ex06",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\n\nImport Data\nIn this example, we’ll be using a dataset on rice data.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\nData Structure of Dataset\n\nkable(head(rice))\n\n\n\n\nCountry\nYear\nYield\nProduction\n\n\n\n\nChina\n1961\n20787\n56217601\n\n\nChina\n1962\n23700\n65675288\n\n\nChina\n1963\n26833\n76439280\n\n\nChina\n1964\n28289\n85853780\n\n\nChina\n1965\n29667\n90705630\n\n\nChina\n1966\n31445\n98403990\n\n\n\n\n\n\n\nPlotting a slopegraph\nSlopegraph is compare changes over time for list of nouns (categories) located on ordinal or interval scale. In this example, we’ll plot a slopegraph to compare two different years, 1961 and 1980 using newggslopegraph().\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class_Ex01",
    "section": "",
    "text": "Objective of this exercise:\n\nSplit knowledge graph of mini case 1 into nodes and edges tibble data frame\nTidy nodes and edges tibble data frame for conforming into tidygraph’s requirements\nCreate tidygraph object using tidied nodes and edges, and visualize them"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#getting-started",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#getting-started",
    "title": "In-class_Ex01",
    "section": "",
    "text": "Objective of this exercise:\n\nSplit knowledge graph of mini case 1 into nodes and edges tibble data frame\nTidy nodes and edges tibble data frame for conforming into tidygraph’s requirements\nCreate tidygraph object using tidied nodes and edges, and visualize them"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-libraries",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-libraries",
    "title": "In-class_Ex01",
    "section": "Import Libraries",
    "text": "Import Libraries\n\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n\nThe libraries used in this exercise:\n\ntidyverse\njsonlite: convert JSON data to R objects\nSmartEDA: help in getting the complete exploratory data analysis by running the function instead of writing long R codes.\ntidygraph\nggraph"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-data",
    "title": "In-class_Ex01",
    "section": "Import Data",
    "text": "Import Data\nIn this example, we’ll be using the dataset posted by VAST Challenge (Mini Case 1) and use jsonlite to extract the data.\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#inspect-structure",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#inspect-structure",
    "title": "In-class_Ex01",
    "section": "Inspect Structure",
    "text": "Inspect Structure\nWe’ll inspect the structure of the object using str() function\n\nstr(kg, max.level=1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#extract-edges-and-nodes-table",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#extract-edges-and-nodes-table",
    "title": "In-class_Ex01",
    "section": "Extract Edges and Nodes Table",
    "text": "Extract Edges and Nodes Table\nThe as_tibble() function will be used to extract the nodes and links tibble data frames from object into 2 tibble data frame called nodes_tbl and edges_tbl.\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#data-exploration",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#data-exploration",
    "title": "In-class_Ex01",
    "section": "Data Exploration",
    "text": "Data Exploration\nFirst, we’ll check the frequency distribution of Edge Type field of edges_tbl.\n\nggplot(data=edges_tbl, aes(y=`Edge Type`)) + geom_bar()\n\n\n\n\n\n\n\n\nNext, we’ll also check for the frequency distribution of Node Type from nodes_tbl."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#create-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#create-knowledge-graph",
    "title": "In-class_Ex01",
    "section": "Create Knowledge Graph",
    "text": "Create Knowledge Graph\nNext, we’ll ensure each of from node list to be mapped in the correct row number.\n\n id_map &lt;- tibble(id=nodes_tbl$id, index=seq_len(nrow(nodes_tbl)))\n\nThen we’ll map the source and target IDs to row indices.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by=c(\"source\" = \"id\")) %&gt;%\n  rename(from=index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to=index)\n\nFilter any invalid edges (or unmatched edges)\n\nedges_tbl&lt;- edges_tbl %&gt;% \n  filter (!is.na(from), !is.na(to))\n\nLastly, we’ll use tbl_graph() to create tidygraph’s graph object\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = kg$directed)\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#visualizing-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#visualizing-knowledge-graph",
    "title": "In-class_Ex01",
    "section": "Visualizing Knowledge Graph",
    "text": "Visualizing Knowledge Graph\nBefore visualizing the knowledge graph, we’ll set the seed to ensure reproducibility.\n\nset.seed(42)\n\nNext we’ll visualize and analyze the graph object\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 4) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nThe graph looks messy and can be unclear to be used to identify patterns. So we can visualize sub-graph of knowledge graphs so that it’s useful for us identify patterns."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#visualizing-the-sub-graph",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#visualizing-the-sub-graph",
    "title": "In-class_Ex01",
    "section": "Visualizing the Sub-graph",
    "text": "Visualizing the Sub-graph\n\nStep 1: filter edges to only “Memberof”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"Memberof\")\n\n\n\nStep 2: Extract only connected nodes (i.e. used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\nStep 3: Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  # optional cleanup\n\n\n\nPlot the sub-graph\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nNow, we can clearly see the relationship between musical group and person much easier compared to the knowledge graph."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspect-knowledge-graph-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspect-knowledge-graph-structure",
    "title": "Take-home Exercise 2",
    "section": "Inspect Knowledge Graph Structure",
    "text": "Inspect Knowledge Graph Structure\nBefore preparing the data, we’ll check the structure of the knowledge graph.\n\nglimpse(MC3)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n\n\nSince the industry column is in list data type, we’’ exclude the column since list data type isn’t acceptable by tbl_graph()."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-edges-and-nodes-tables",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-edges-and-nodes-tables",
    "title": "Take-home Exercise 2",
    "section": "Extract Edges and Nodes Tables",
    "text": "Extract Edges and Nodes Tables\nThe as_tibble() function is used to extract nodes and links tibble data frame from MC3 tibble data frame.\n\nmc3_nodes &lt;- as_tibble(MC3$nodes)\nmc3_edges &lt;- as_tibble(MC3$edges)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "title": "Take-home Exercise 2",
    "section": "Initial EDA",
    "text": "Initial EDA\nWe’ll use ExpCatViz() from SmartEDA library to reveal frequency distribution of all categorical fields from mc3_nodes.\n\nExpCatViz(data=mc3_nodes,\n          col=\"lightblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning-and-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning-and-wrangling",
    "title": "Take-home Exercise 2",
    "section": "Data Cleaning and Wrangling",
    "text": "Data Cleaning and Wrangling\nThe following steps are taken to clean the nodes:\n\nConvert values in id into character data type\nExclude record with id that are missing\nExclude records with similar id values\nExclude thing_collected field\n\n\nmc3_nodes_cleaned &lt;- mc3_nodes %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected)\n\nNext, the following steps are taken to clean the edges:\n\nRename source column into from_id and target column into to_id\nConvert values in from_id and to_id column into character data type\nExclude values in from_id and to_id that’s not found in the id column from mc3_nodes_cleaned\nExclude records where from_id and to_id, or from_id or to_id is missing\n\n\n    mc3_edges_cleaned &lt;- mc3_edges %&gt;%\n      rename(from_id = source, \n             to_id = target) %&gt;%\n      mutate(across(c(from_id, to_id), \n                    as.character)) %&gt;%\n      filter(from_id %in% mc3_nodes_cleaned$id, \n             to_id %in% mc3_nodes_cleaned$id) %&gt;%\n      filter(!is.na(from_id), !is.na(to_id))\n\nA new dataframe from the existing data frame (mc3_nodes_cleaned) and .row_id column is added which assigns unique row number to each row number (works like row index). Then we select id and .row_id columns whereas other columns are dropped.\n\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\nThen from_id and to_id columns in mc_edges_indexed are converted ito integer indices. The rows with unmatched nodes are also dropped.\n\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, \n            by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, \n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  select(from, to, is_inferred, type) %&gt;%\n  filter(!is.na(from) & !is.na(to))  \n\nNext, the node list will only include nodes that are used in the edge list and new indices are assigned\n\nused_node_indices &lt;- sort(\n  unique(c(mc3_edges_indexed$from, \n           mc3_edges_indexed$to)))\n\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\nThe lookup is rebuild from old index to new index.\n\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(\n    used_node_indices))\n\nThen, we’ll update edge indices to match new node table\n\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, \n            by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, \n            by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  select(from = from_new, to = to_new, \n         is_inferred, type)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#build-tidygraph-object",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#build-tidygraph-object",
    "title": "Take-home Exercise 2",
    "section": "Build tidygraph Object",
    "text": "Build tidygraph Object\nWe’ll build the tidygraph object\n\nmc3_graph &lt;- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)\n\n\nstr(mc3_graph)\n\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 31\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ date             : chr [1:1159] NA NA NA NA ...\n  .. ..$ time             : chr [1:1159] NA NA NA NA ...\n  .. ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 2\n  .. ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n $ :&lt;environment: 0x000002033247bf90&gt; \n - attr(*, \"active\")= chr \"nodes\"\n\n\nVisualize Knowledge Graph\n\nset.seed(1234)\n\n\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`), \n                  size = 4) +\n  geom_node_text(aes(label = type), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  }
]