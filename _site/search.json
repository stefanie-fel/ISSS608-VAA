[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my portfolio for  Visual Analytics and Applications module in Singapore Management University!\nIn this website, you will find my hands-on exercise, in-class exercise as well as coursework for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)\n\nImporting the data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\nPlotting a simple bar chart to test if it works.\n\nggplot(data=exam_data, aes(x=RACE)) + geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nGrammar of Graphics defined by Leeland Wilkinson (1999) to be framework that follows a layered approach to describe and construct visualization. ggplot2 applies the grammar of graphics:\n\n\n\n7 layers of grammar of graphics\n\n\n\nData: dataset that’s being plotted\nAesthetics: properties that can be perceived on the graphics\nGeometrics: visual elements used for data (e.g. point, bar or line).\nFacets: how to break up and display subset of data as small multiples (conditioning or latticing)\nStatistics: statistical transformation that summarizes data (e.g. mean or confidence intervals)\nCoordinate systems: describes how data coordinates are mapped to the plane of graphic\nThemes: controls display part of the visualization (main title, sub-title, y-axis title and legend).\n\n\n\n\nFirst we will explore geom_bar, which is used to plot bar charts. Here is how the code looks like and the graph:\n\nggplot(data=exam_data, aes(x=RACE))+geom_bar()\n\n\n\n\n\n\n\n\nNext, we’ll be exploring dot plots (geom_dotplot). It’s quite similar to bar chart but in dot form instead of a bar. But it may not always be the most useful graph, as it leaves out y-axis values.\n\nggplot(data=exam_data, aes(x=MATHS))+geom_dotplot(binwidth=2.5, dotsize=0.5) + scale_y_continuous(NULL, breaks=NULL)\n\n\n\n\n\n\n\n\nNext, geom_histogram plots a histogram. But it’s possible to stack different categorical values to compare distributions of each variable like below:\n\nggplot(data=exam_data, \n       aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins=20, color=\"grey30\")  \n\n\n\n\n\n\n\n\nGeom_density is used to draw density estimate, which is a smoother version of a histogram. Similar to the histogram, you can stack different variables.\n\nggplot(data=exam_data, \n       aes(x = MATHS, colour=GENDER)) +\n  geom_density()    \n\n\n\n\n\n\n\n\nGeom_boxplot is used to plot boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +    \n  geom_boxplot(notch=TRUE)   \n\n\n\n\n\n\n\n\nGeom_violin is used to plot a violin plot as a compact display of continuous distribution (similar to boxplot).\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nGeom_point is used to plot scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()      \n\n\n\n\n\n\n\n\nIt’s also possible to plot two different geometry objects at the same graph. In this example, I’ll be plotting boxplot and scatterplot at the same graph. It is done by just adding ‘+’ after the first geom object.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +          geom_point(position=\"jitter\", size = 0.5)  \n\n\n\n\n\n\n\n\n\n\nIncorporating stats_summary after geom object reveal statistic summary, such as average, median, max or min. In this example, the function mean is used:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom =\"point\", fun = \"mean\",    colour =\"red\", size=4)     \n\n\n\n\n\n\n\n\nAdding best fit line is possible by using the function geom_smooth:\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nFacet generate small multiple trellis plot, which display different subset of data. There are two types of facet: facet_wrap and facet_grid\nFacet_wrap is used to wrap 1-dimension sequence of panels into 2-dimension. So this creates multiple plot for one variable like below:\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nFacet_grid is used to create a grid of panels using one or two variables.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nThere are different types of coordinates available such as: coord_cartesian(), coord_flip(), coord_fixed() and coord_quickmap().\nCoord_flip is used to flip horizontal bars into vertical bars.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the range of y and x-axis can be done by specifying xlim and ylim in the coordinate object.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5) + \n  coord_cartesian(xlim=c(0,100),\nylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a lot of different ways to beautify graphs. Themes are one way to add aesthetic to the graphs, as it affects background color, size of fonts, gridline and color of labels. Different themes will affect the look of the graph. In this example, I used the minimal theme:\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)\n\nImporting the data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\nPlotting a simple bar chart to test if it works.\n\nggplot(data=exam_data, aes(x=RACE)) + geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Grammar of Graphics defined by Leeland Wilkinson (1999) to be framework that follows a layered approach to describe and construct visualization. ggplot2 applies the grammar of graphics:\n\n\n\n7 layers of grammar of graphics\n\n\n\nData: dataset that’s being plotted\nAesthetics: properties that can be perceived on the graphics\nGeometrics: visual elements used for data (e.g. point, bar or line).\nFacets: how to break up and display subset of data as small multiples (conditioning or latticing)\nStatistics: statistical transformation that summarizes data (e.g. mean or confidence intervals)\nCoordinate systems: describes how data coordinates are mapped to the plane of graphic\nThemes: controls display part of the visualization (main title, sub-title, y-axis title and legend)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-different-geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-different-geometric-objects",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "First we will explore geom_bar, which is used to plot bar charts. Here is how the code looks like and the graph:\n\nggplot(data=exam_data, aes(x=RACE))+geom_bar()\n\n\n\n\n\n\n\n\nNext, we’ll be exploring dot plots (geom_dotplot). It’s quite similar to bar chart but in dot form instead of a bar. But it may not always be the most useful graph, as it leaves out y-axis values.\n\nggplot(data=exam_data, aes(x=MATHS))+geom_dotplot(binwidth=2.5, dotsize=0.5) + scale_y_continuous(NULL, breaks=NULL)\n\n\n\n\n\n\n\n\nNext, geom_histogram plots a histogram. But it’s possible to stack different categorical values to compare distributions of each variable like below:\n\nggplot(data=exam_data, \n       aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins=20, color=\"grey30\")  \n\n\n\n\n\n\n\n\nGeom_density is used to draw density estimate, which is a smoother version of a histogram. Similar to the histogram, you can stack different variables.\n\nggplot(data=exam_data, \n       aes(x = MATHS, colour=GENDER)) +\n  geom_density()    \n\n\n\n\n\n\n\n\nGeom_boxplot is used to plot boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +    \n  geom_boxplot(notch=TRUE)   \n\n\n\n\n\n\n\n\nGeom_violin is used to plot a violin plot as a compact display of continuous distribution (similar to boxplot).\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nGeom_point is used to plot scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()      \n\n\n\n\n\n\n\n\nIt’s also possible to plot two different geometry objects at the same graph. In this example, I’ll be plotting boxplot and scatterplot at the same graph. It is done by just adding ‘+’ after the first geom object.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +          geom_point(position=\"jitter\", size = 0.5)  \n\n\n\n\n\n\n\n\n\n\nIncorporating stats_summary after geom object reveal statistic summary, such as average, median, max or min. In this example, the function mean is used:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom =\"point\", fun = \"mean\",    colour =\"red\", size=4)     \n\n\n\n\n\n\n\n\nAdding best fit line is possible by using the function geom_smooth:\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-facet-object",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-facet-object",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facet generate small multiple trellis plot, which display different subset of data. There are two types of facet: facet_wrap and facet_grid\nFacet_wrap is used to wrap 1-dimension sequence of panels into 2-dimension. So this creates multiple plot for one variable like below:\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nFacet_grid is used to create a grid of panels using one or two variables.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "There are different types of coordinates available such as: coord_cartesian(), coord_flip(), coord_fixed() and coord_quickmap().\nCoord_flip is used to flip horizontal bars into vertical bars.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the range of y and x-axis can be done by specifying xlim and ylim in the coordinate object.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \nlinewidth=0.5) + \n  coord_cartesian(xlim=c(0,100),\nylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-in-r",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "There are a lot of different ways to beautify graphs. Themes are one way to add aesthetic to the graphs, as it affects background color, size of fonts, gridline and color of labels. Different themes will affect the look of the graph. In this example, I used the minimal theme:\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-libraries",
    "title": "Hands-on Exercise 2",
    "section": "Install and Load Libraries",
    "text": "Install and Load Libraries\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\nIn this exercise, the following libraries will be used :\n\ntidyverse: R package that loads data science packages (usually used for data wrangling, analysis and visualization purposes)\nggrepel: R package that provide geom object to prevent overlapping text labels\npatchwork: R package that allows combination of ggplot2 graphs to be plotted in single layout\nhrbrthemes: R package that provide typography-centric themes and themes components in ggplot2\nggthemes: R package that provide more themes, geoms and scales for ggplot2\n\nImport Data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-package",
    "title": "Hands-on Exercise 2",
    "section": "ggrepel Package",
    "text": "ggrepel Package\nIt replaces geom_text with geom_text_repel and geom_label with geom_label_repel. In this example, a graph of primary 3 students’ maths and english scores were plotted using geom_label.\n\nggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm, \nlinewidth=0.5) +  \ngeom_label(aes(label = ID), \nhjust = .5, vjust = -.5) +\ncoord_cartesian(xlim=c(0,100),\nylim=c(0,100)) +\nggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nBut as can be seen, the data points looks cluttered and overlap with each other. But when we replace the geom_label with geom_label_repel, this is how the graph looks like:\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +    geom_point() + \n  geom_smooth(method=lm, linewidth=0.5) +  geom_label_repel(aes(label = ID), \nfontface = \"bold\") + coord_cartesian(xlim=c(0,100),               ylim=c(0,100)) + ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nThe graph looks better as there’s no more overlapping labels so that the graph becomes clearer."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "ggtheme Package",
    "text": "ggtheme Package\nWhen using ggplot2, we can customize how the graph looks like as ggplot2 offers in-built themes (e.g. theme_gray, theme_bw, theme_classic, theme_dark, theme_light, theme_linedraw, theme_minimal and theme_void). For more information about themes in ggtheme, click here. In this example, theme_gray is used, which looks like this:\n\nggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") + theme_gray() + ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\nHowever, ggtheme package offers more than just basic themes. It also has professional-looking themes that are aesthetically more pleasing for presentation. In this example, the `theme_economist` is used:\n\nggplot(data=exam_data, aes(x = MATHS)) + geom_histogram(bins=20, boundary = 100,         color=\"grey25\", fill=\"grey90\") + ggtitle(\"Distribution of Maths scores\") + theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "hrbthems Package",
    "text": "hrbthems Package\nhrbthems package provides a base theme that focus on typographic elements (incl. where labels are placed and fonts)\n\nggplot(data=exam_data, \naes(x = MATHS)) +\ngeom_histogram(bins=20, \nboundary = 100,\ncolor=\"grey25\", \nfill=\"grey90\") +\nggtitle(\"Distribution of Maths scores\") +\ntheme_ipsum(axis_title_size = 18,\nbase_size = 15,\ngrid = \"Y\")\n\n\n\n\n\n\n\n\nThe code above uses the following arguments:\n\naxis_title_size is used to increase font size\nbase_size is used to increase default axis label\ngrid is used to remove grid line"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-beyond-1-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-beyond-1-graph",
    "title": "Hands-on Exercise 2",
    "section": "Plotting Beyond 1 Graph",
    "text": "Plotting Beyond 1 Graph\nHow can we combine different graphs into one ? For example, we want to compare students’ math scores, english scores and combination of english and math scores. How can we plot them into one ?\n\np1 &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\ngeom_histogram(bins=20, \nboundary = 100,\ncolor=\"grey25\", \nfill=\"grey90\") + coord_cartesian(xlim=c(0,100)) +\nggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, aes(x = ENGLISH)) +\ngeom_histogram(bins=20, \nboundary = 100, color=\"grey25\", fill=\"grey90\") +\ncoord_cartesian(xlim=c(0,100)) +\nggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm, \nsize=0.5) +  \ncoord_cartesian(xlim=c(0,100),                ylim=c(0,100)) +\nggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\nWe end up with 3 individual graphs. But with patchwork, we can combine separate graphs into 1. Few syntax used to combine graphs:\n\n\\(+\\) sign is used to combine two-column layout.\n\\(()\\) sign is used to create subplot group\n\\(/\\) sign is used to build two-row layout.\n\\(|\\) sign is used to place graphs beside each other.\nThe code below combines two graph into one row, side by side.\n\n\np1 + p2\n\n\n\n\n\n\n\n\nWhile this code chunk plots p1 to be above p2, and p3 to be beside both plots.\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s also possible to add annotation in patchwork using plot_annotation\n\n\n\n\n((p1 / p2)|p3) + plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nAdding Another Graph in a Graph\nWe can add another graph anywhere within a graph using inset-element() of patchwork package.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\nUsing patchwork and ggtheme Together\nIt’s possible to combine your graphs while applying theme to it like below.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "background of what I’m doing and objective of the analysis\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "background of what I’m doing and objective of the analysis\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home_Ex01",
    "section": "The Data",
    "text": "The Data\nThe dataset was extracted from Singstat under the name Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024.\n\nIt comprised of 6 variables and 60K records. The dataset recorded the demographics and count of residents who lived in each sub zone and planning area in June 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-required-libraries",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-required-libraries",
    "title": "Take-home_Ex01",
    "section": "Load Required Libraries",
    "text": "Load Required Libraries\n\npacman::p_load(ggrepel, tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home_Ex01",
    "section": "Import Data",
    "text": "Import Data\n\npopulation_data &lt;- read_csv(\"respopagesex2024.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this exercise, we’ll be using the following libraries:\n\nggiraph: allows user to create dynamic ggplot graphs\nplotly: create interactive and publication-quality graphs\nDT: provide interface to the JavaScript library called DataTables\ntidyverse\npatchwork\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this exercise, we’ll be using the following libraries:\n\nggiraph: allows user to create dynamic ggplot graphs\nplotly: create interactive and publication-quality graphs\nDT: provide interface to the JavaScript library called DataTables\ntidyverse\npatchwork\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on Exercise 3",
    "section": "Import data",
    "text": "Import data\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data",
    "title": "Hands-on Exercise 3",
    "section": "Exploring Interactive Data",
    "text": "Exploring Interactive Data\nVisualization using ggiraph how is it interactive ?\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nCustomize Style in Tooltip\nWe can customize the style (e.g. background opacity, duration of transition, or use extra css for customization, etc) by using opts_tooltip() function. In this example, we’ll change the background color of girapfe() object from black to white, black font color and bold font to make it easier to see than a black background color since the dotplot also has black color.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\nDisplay Statistics using tooltip\nIt is also possible to display other information, e.g. statistics. In this example, the tooltip calculates the average and 90% of confidence interval and it will be displayed when the mouse hovers onto the bar graph:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-feature-using-data_id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-feature-using-data_id",
    "title": "Hands-on Exercise 3",
    "section": "Interactive Feature using data_id",
    "text": "Interactive Feature using data_id\nAnother way to incorporate interactivity in graph is by using data_id. data_id is used to assign unique identifier to each graphical element. It’s usually used to group elements for hover or election. In this code chunk, it assigns each dot of the ID to its CLASS, so when user hover to a particular CLASS, data point with the same CLASS will be highlighted together.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(   \n    aes(data_id = CLASS), \n    stackgroups = TRUE,   \n    binwidth = 1,         \n    \n    method = \"histodot\") + scale_y_continuous(NULL,               breaks = NULL)\n\ngirafe(                 \n  ggobj = p,              \n  width_svg = 6,          \n  height_svg = 6*0.618    \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data-using-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exploring-interactive-data-using-ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "Exploring Interactive Data using ggiraph",
    "text": "Exploring Interactive Data using ggiraph\nWe can create interactive graphs with ggiraph by utilizing ggplot geometries. ggplot geometries understand 3 arguments:\n\nTooltip: a small message pops up when user hovers over elements.\nOnclick: contain JavaScript functions that would be executed when the graph is clicked.\nData_id: contain an id to be associated with elements.\n\n\nTooltip Argument\nThe code chunk will plot interactive statistical graph using ggiraph. First, ggplot object will be created and then `girafe()` of ggiraph will create interactive svg object,\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that different from what we’ve learned before we don’t use geom_dotplot() like we did on Hands On Exercise 1, instead we use geom_dotplot_interactive() to create the basic graph.\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\nCustomize Style in Tooltip\nWe can customize the style (e.g. background opacity, duration of transition, or use extra css for customization, etc) by using opts_tooltip() function. In this example, we’ll change the background color of girapfe() object from black to white, black font color and bold font to make it easier to see than a black background color since the dotplot also has black color.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\nDisplay Statistics using tooltip\nIt is also possible to display other information, e.g. statistics. In this example, the tooltip calculates the average and 90% of confidence interval and it will be displayed when the mouse hovers onto the bar graph:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-argument",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-argument",
    "title": "Hands-on Exercise 3",
    "section": "Tooltip Argument",
    "text": "Tooltip Argument\nThe code chunk will plot interactive statistical graph using ggiraph. First, ggplot object will be created and then `girafe()` of ggiraph will create interactive svg object,\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that different from what we’ve learned before we don’t use geom_dotplot() like we did on Hands On Exercise 1, instead we use geom_dotplot_interactive() to create the basic graph.\n\n\n\nDisplay Multiple Information on Tooltip\nContent in tooltip can be customized by including a list object like in below code chunk.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first line appends a new column using$tooltip to the exam_data dataset, whereas the c(paste0(..) combines strings to display when user hover on the graph.\n\n\nCustomize Style in Tooltip\nWe can customize the style (e.g. background opacity, duration of transition, or use extra css for customization, etc) by using opts_tooltip() function. In this example, we’ll change the background color of girapfe() object from black to white, black font color and bold font to make it easier to see than a black background color since the dotplot also has black color.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\nDisplay Statistics using tooltip\nIt is also possible to display other information, e.g. statistics. In this example, the tooltip calculates the average and 90% of confidence interval and it will be displayed when the mouse hovers onto the bar graph:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customizing-style-of-data_id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customizing-style-of-data_id",
    "title": "Hands-on Exercise 3",
    "section": "Customizing Style of data_id",
    "text": "Customizing Style of data_id\nIt is also possible to change the color of the hover effect in data_id. By default, the color orange as seen previously, but the color can be changed using opts_hover which changes the color of the dots. Additionally, we can add opts_hover_inv to change the style of other elements that are not being hovered.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3",
    "section": "Click Effect with Onclick",
    "text": "Click Effect with Onclick\nonlick argument will allow user who click on the graph to be redirected according to link provided on the onclick argument.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,  \n    binwidth = 1,         \n    method = \"histodot\") +   \n  scale_y_continuous(NULL,\n breaks = NULL)\ngirafe(                   \n  ggobj = p,            \n  width_svg = 6,          \n  height_svg = 6*0.618) \n\n\n\n\n\n\nCoordinated graphs using ggiraph and patchwork\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graph-using-crosstalk",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graph-using-crosstalk",
    "title": "Hands-on Exercise 3",
    "section": "Interactive Graph using crosstalk",
    "text": "Interactive Graph using crosstalk\nCrosstalk is an add-on to the htmlwidgets package that allows cross-widget interactions (linked brushing and filtering).\n\nInteractive Data Visualization using DT Package\nDT package creates interactive DataTables (through JavaScript library), which renders a HTML data table. Users can filter, highlight rows, link table to other widgets, etc. In this example, we can display all of data in the dataset.\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\nLinked Brushing with crosstalk\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs can be seen, as user filter using the search bar, the graph is linked. What we can learn from this example:\n\nuse highlight() : add linked brushing functionality (note: it only works for Plotly plots)\nuse bscols() : arranges widget side by side using bootstrap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "When creating animation, the plot doesn’t move. Instead, individual plots are stitched together like a video. Each frame is a different plot when conveying motion, which is built using relevant subset of the aggregate data. Then the subset drives the flow of the animation when stitched back together.\n\nTerminologies in this Exercise:\n\nFrame: each frame represent different point in time or category. When the frame changes, the data point also changes which represent the updated version of data.\nAnimation Attributes: the settings that control how the animation behaves e.g. duration of each frame or which plot would be the start of animation)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#example-build-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#example-build-population-bubble-plot",
    "title": "Hands-on Exercise 4",
    "section": "Example: Build Population Bubble Plot",
    "text": "Example: Build Population Bubble Plot\nIn this example, we’ll build a bubble plot uisng ggplot2.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#animated-bubble-plot",
    "title": "Hands-on Exercise 4",
    "section": "Animated Bubble Plot",
    "text": "Animated Bubble Plot\nWe can animate the plot by adding to the code:\n\ntransition_time() to create transition through the YEAR variable (animation moves as the year changes)\nease_aes() is used to control the of aesthetics. The default is linear, but we can choose from quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  }
]