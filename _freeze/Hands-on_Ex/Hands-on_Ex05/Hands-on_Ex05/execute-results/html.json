{
  "hash": "b51c9838dbb9668eb3a4614c8b792e54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 5\"\nauthor: \"Stefanie Felicia\"\ndate: \"May, 12 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Getting Started\n\nObjective of this exercise:\n\n-   How to model, analyze and visualize network\n\n-   create graph object data frame, manipulate them using dplyr, lubridate and tidygraph\n\n-   build network graph visualization using appropriate function of ggraph\n\n-   compute network geometrics using tidygraph\n\n-   build advanced graph visualization by adding network geometrics\n\n-   Build interactive network visualization using visNetwork\n\n## Import Libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)\n```\n:::\n\n\n\nThe libraries used in this exercise would be:\n\n-   igraph: provides function for generating random and regular graphs, graph visualization, centrality methods, etc\n\n-   tidygraph: an entry unto the tidyverse that provides a tidy framework for all things relational (network, graph, trees, etc)\n\n-   ggraph\n\n-   visNetwork: package for network visualization using vis.js (a JS library)\n\n-   lubridate: makes it easier working with dates and times\n\n-   clock: R package to work with date-times\n\n-   tidyverse\n\n-   graphlayouts: additional layout algorithm for network visualization\n\n-   concaveman: the *concavemean* function ports *concaveman* library from *mapbox* and computes the concave polygon for one or several set of points.\n\n-   ggforce: provide missing functionality *ggplot2* through extension introduced with *ggplotv2*\n\n## Import Data\n\nIn thsi exercise, we'll be using two dataset, the node data and the link data. The datasets are from oil exploration and extraction company. The edge dataset contain two weeks of 9063 emails correspondence between 55 employees, whereas the nodes dataset consist of names, department and title of employees.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_nodes <- read_csv(\"GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"GAStech_email_edge-v2.csv\")\n```\n:::\n\n\n\n## Review Data\n\nNext, we checl for the structure of the data frame using glimpse() to show us a snippet of the values in each columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n```\n\n\n:::\n:::\n\n\n\n## Data Wrangling\n\nAs seen above, the sentDate variable is in character data type instead of date data type. So we want to change the data type.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n```\n:::\n\n\n\n::: callout-note\n-   `dmy` and `wday` functions are from the lubidate package\n\n-   `dmy` transform SentDate to date data type\n\n-   `wday` the day of the week as decimal number if label is TRUE, but returns name of the day if label is FALSE. This function create a new column in the data frame.\n:::\n\nNext, we will check the make sure the created variable has the right data type and data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n```\n\n\n:::\n:::\n\n\n\nHowever, since the data frame reveals that it consist of individual e-mail flow record, it may not be useful for visualization. So we want to aggregate the individual by date sent, senders, receiver, main subject and day of the week.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n```\n:::\n\n\n\n::: {.callout-note}\n-   `filter(MainSubject == \"Work related\")` filters and keep rows that is work related and group them by `source`, `target` and `weekday`\n\n-   `summarise(Weight = n())` takes each unique group and count number of rows there is and assign them to `Weight`\n\n-    `filter(source != target)` removes rows where source and target are the same person, while `filter(Weight > 1)` only keeps interaction that happened more than once on the same weekday\n\n-   `ungroup()` removes the grouping\n:::\n\nTime to check the `GAStech_edges_aggregated` dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n```\n\n\n:::\n:::\n\n\n\n## Create network object with tidygraph\n\ntidygraph package can be used to create network objects, such as:\n\n-   `tbl_graph` : creates a tbl_graph network from nodes and edges data\n\n-   `as_tbl_graph()` : convert network data and object into tbl_graph network. The following are the network data and object supported by this function:\n\n    -   a **node** **data.frame** and an **edge** data.frame\n\n    -   **data.frame, list, matrix** from base\n\n    -   **igraph** from igraph\n\n    -   **network** from network\n\n    -   **dendrogram** and **hclust** from **stats**\n\n    -   **Node** from data.tree\n\n    -   **phylo** and **evonet** from ape\n\n    -   **graphNEL, graphAM, graphBAM** from graph (in Bioconductor)\n\n### Using tbl_graph() to build data model\n\nCreate `tbl_graph` of tinygraph to build tidygraph's network graph datafarme\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   <dbl> <chr>               <chr>          <chr>                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\n-   The tbl_graph consist of 54 nodes and 1372 edges\n\n-   The Node data is active, this means that it's possible to manipulate the data in one tibble at a time\n:::\n\nChange the active object\n\nThe nodes in the tibble data frame is active by default, but we can **change which tibble data frame is active** with the **activate() function.** If we wanted to rearrange the rows in the edges tibble to list with highest weight, we can use **activate()** and **arrange()**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   <int> <int> <ord>      <int>\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n\nPlot Static Network Graph with ggraph\n\nThere are 3 main ascept to ggrpah's network graph, such as:\n\n-   nodes\n\n-   edges\n\n-   layouts: vertical and horizontal placement fo nodes when plotting particular graph structure\n\n    In this example, we'll use geom-edge_link() and geom_node_point() to plot a network using GAStech_graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Customize the Style of Graph \n\n### Using Theme\n\nIn this example, we can use theme to remove x and y-axes by using `theme_graph()` .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nBut apart from that, we can also use `theme_graph()` to remove grids, border or font. Additionally, we can also change the color of the plot by adding `colour =` argument like below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### ggraph Layout\n\nggraph supports different standard layouts such as star, circle, nicelt (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. The below shows layouts supported by ggraph.\n\n![](images/ggraph_layout1.png)\n\n![](images/ggraph_layout3.png)\n\nFruchterman and Reingold Layout\n\nIn this example, we'll be creating network graph using Fruchterman and Reingold layout (done by adding `layout = \"fr\"` in argument in ggraph)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## Modify Network Node\n\nIn this example, we'll color the node by their departments.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n::: .callout-tip\n-   We added `colour = Department` in`geom_node_point(aes())`\n:::\n\n## Modify Network Edges\n\nIn this example, we'll change the thickness of the edges by adding Weights.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n::: .callout-tip\n-   Similar to modifying the network node, we can add arguments into the `geom_edge_link()` to add weights to the edges.\n:::\n\n## Creating facet graphs\n\nIn data visualization, facet is used to reduce edge over-plotting by **spreading nodes** **and edges** out **based on their attributes**. There are three functions in ggraph to implement faceting:\n\n-   `facet_nodes()`: edges are only drawn in panel if **both terminal are present**\n\n-   `facet_edges()`: nodes are always drawn in all panels even if node data contains an attribute named the same as the one used for edge facetting\n\n-   `facet_graph()`: faceting on two variables **simultaneously**\n\n### Working with facet_edges()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nWe also can change the position of the legend like below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nAdditionally, we can also frame each graph like below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## Working with facet_nodes()\n\nIn this example, we used facet_nodes()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Network Metric Analysis\n\n### Computing Centrality Indices\n\nCentrality measures are collection of statistical indices used to describe relative importance of the actors are to a network. There are 4 types of cenrality measures:\n\n-   Degree: how many connection a node has\n\n-   Betweenness: centrality measure of vertex within a graph (high betweenness = bridge or bottleneck in a network or have shortest path to reach the other node)\n\n-   Closeness: vertices that have shorter distance to other vertices have higher closeness (shortest path has higher centrality)\n\n-   Eigenvector: measure of the importance of a node in a network (the value of your connection affects your own value)\n\n    In this example, we'll be usig the betweeness centrality.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    g <- GAStech_graph %>%\n      mutate(betweenness_centrality = centrality_betweenness()) %>%\n      ggraph(layout = \"fr\") + \n      geom_edge_link(aes(width=Weight), \n                     alpha=0.2) +\n      scale_edge_width(range = c(0.1, 5)) +\n      geom_node_point(aes(colour = Department,\n                size=betweenness_centrality))\n    g + theme_graph()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Hands-on_Ex05_files/figure-html/unnamed-chunk-21-1.png){width=672}\n    :::\n    :::\n\n\n\n## Visualizing Network Metrics\n\nFrom **ggraph v2.0** onward tidygraph algorithms, such as centrality measures can be accessed directly in ggraph calls, so it's no longer necessary to precompute and store derived node and edge centrality measures.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Visualizing Community\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- GAStech_graph %>%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}