{
  "hash": "79b0a592de9043ec4b11aff198aa6d16",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 4\"\ndate: \"May 2, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# How Does Animation Work in Data Visualization ?\n\nWhen creating animation, the plot doesn't move. Instead, individual plots are stitched together like a video. Each frame is a different plot when conveying motion, which is built using relevant subset of the aggregate data. Then the subset drives the flow of the animation when stitched back together.\n\n![](/images/hands_on 3 illustration.png)\n\nTerminologies in this Exercise:\n\n-   Frame: each frame represent different point in time or category. When the frame changes, the data point also changes which represent the updated version of data.\n\n-   Animation Attributes: the settings that control how the animation behaves e.g. duration of each frame or which plot would be the start of animation).\n\n# Getting Started\n\nIn this exercise we'll be using the following libraries:\n\n-   <a href=https://gganimate.com/>gganimate</a>: extends grammar of graphics implemented by ggplot2 to include animation.\n\n-   <a href=https://www.rdocumentation.org/packages/gifski/versions/1.32.0-1/topics/gifski>gifski</a>: converts image frame to high quality GIF.\n\n-   gapminder: is an excerpt of data available at gapminder.org. We'll be using the country_colors scheme in this exercise.\n\n-   plotly\n\n-   tidyverse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n```\n:::\n\n\n\n# Import Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_at(col, as.factor) %>%\n  mutate(Year = as.integer(Year))\n```\n:::\n\n\n\n::: {.callout-tip title=\"How to extract data from .xls file\"}\n\n:::\n\n# Animate Visualization using gganimate\n\n\\(i\\) reshape data by using **tidyr** package, and (ii) process, wrangle and transform data by using **dplyr** package.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}