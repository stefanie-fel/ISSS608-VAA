{
  "hash": "4cec050d784a00be6f0f5027cbc5c24c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Ex01\"\nauthor: \"Stefanie Felicia\"\ndate: \"\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# Background\n\nbackground of what I'm doing and objective of the analysis\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on **demographic structures and distribution of Singapore in 2024**.\n\nAssuming the role of the graphical editor of the media company, you are tasked to prepare **at most three data visualisation** for the article.\n\n# The Data\n\nThe dataset was extracted from <a href = https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data>Singstat</a> under the name <b>Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024</b>.\n\n![](images/screenshot_dataset.png)\n\nIt comprised of 6 variables and 60K records. The dataset recorded the demographics and count of residents who lived in each sub zone and planning area in June 2024.\n\n# Load Required Libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(dplyr, tidyverse)\n```\n:::\n\n\n\n# Import Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data <- read_csv(\"respopagesex2024.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nAs can be seen above, the data set comprise of 6 variables: 4 variables are character data type (namely, PA, SZ, age and sex), and 2 variables are double data type (number of population, time). Here is the a snippet of the data set:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(population_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  <chr>      <chr>                  <chr> <chr>   <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n```\n\n\n:::\n:::\n\n\n\n# Data pre-processing\n\nFirst, we will look if there are duplicates found in the data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(population_data[duplicated(population_data), ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nNext, we will check for missing values in the data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(population_data, function(x) sum(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PA   SZ  Age  Sex  Pop Time \n   0    0    0    0    0    0 \n```\n\n\n:::\n:::\n\n\n\nNow, that let's convert the age data type from character data type to integer data type.\n\n\\\nWe first check for unique values in the Age variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(population_data$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"0\"           \"1\"           \"2\"           \"3\"           \"4\"          \n [6] \"5\"           \"6\"           \"7\"           \"8\"           \"9\"          \n[11] \"10\"          \"11\"          \"12\"          \"13\"          \"14\"         \n[16] \"15\"          \"16\"          \"17\"          \"18\"          \"19\"         \n[21] \"20\"          \"21\"          \"22\"          \"23\"          \"24\"         \n[26] \"25\"          \"26\"          \"27\"          \"28\"          \"29\"         \n[31] \"30\"          \"31\"          \"32\"          \"33\"          \"34\"         \n[36] \"35\"          \"36\"          \"37\"          \"38\"          \"39\"         \n[41] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[46] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[51] \"50\"          \"51\"          \"52\"          \"53\"          \"54\"         \n[56] \"55\"          \"56\"          \"57\"          \"58\"          \"59\"         \n[61] \"60\"          \"61\"          \"62\"          \"63\"          \"64\"         \n[66] \"65\"          \"66\"          \"67\"          \"68\"          \"69\"         \n[71] \"70\"          \"71\"          \"72\"          \"73\"          \"74\"         \n[76] \"75\"          \"76\"          \"77\"          \"78\"          \"79\"         \n[81] \"80\"          \"81\"          \"82\"          \"83\"          \"84\"         \n[86] \"85\"          \"86\"          \"87\"          \"88\"          \"89\"         \n[91] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n\n\nWe can't change the variable to numeric data type because we have values \"90_and_Over\". So we can change it to age 90 and change the data type.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data$Age[population_data$Age == \"90_and_Over\"] <- \"90\"\ntypeof(population_data$Age) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\npopulation_data$Age <- as.numeric(population_data$Age)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(population_data$Sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Males\"   \"Females\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data$Sex[population_data$Sex == \"Females\"] <- \"1\"\npopulation_data$Sex[population_data$Sex == \"Males\"] <- \"0\"\npopulation_data$Sex <- as.numeric(population_data$Sex)\n```\n:::\n\n\n\nUnivariate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = population_data, aes(x = Sex)) +\n  geom_bar(color = \"grey30\", fill = \"steelblue\") +\n  labs(y = \"Count\", title = \"Count of Records by Sex\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=population_data, \n       aes(x = Age)) +\n  geom_histogram(bins=20, color=\"gray30\", fill=\"cyan3\")+ \n  labs(title = \"Age Distribution of Singapore Resident June 2024\",\n       x = \"Age\",\n       y = \"Count\") +\n  theme_minimal()  \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nVariable Selection\n\nAge and Gender Distribution of Singapore Residents\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data %>%\n  mutate(population = ifelse(Sex == 0, Pop * (-1), Pop * 1)) %>%\n  ggplot(aes(x = Age, y = population, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Age-Sex Pyramid\", x = \"Age\", y = \"Population\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nPopulation of Residents Living in Each Subzone/Planning Area\n\nDemographics of Residents Living in Each Subzone/Planning Area\n\nReferences\n\n1.  <a href=https://www.statology.org/r-count-duplicates/>How to Count Duplicates in R (With Examples)</a>\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}