---
title: "Hands-on_Ex06"
author: "Stefanie Felicia"
date: "May, 20 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## Getting Started

Objective of this exercise:

-   Plot calender heatmap using ggplot2

-   Plot cycle plot using ggplot2

-   Plot slopegraph

-   Plot horizon chart

## Import Libraries

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes,
               gridExtra, readxl, knitr, data.table,
               CGPfunctions, ggHoriPlot, tidyverse)
```

The libraries used in this exercise would be:

-   scales

-   viridis: color maps that are designed to improve graph readability

-   lubridate

-   ggthemes

-   gridExtra: provide user-level functions to work with "grid" graphics and arrange multiple grid-based plots ona page

-   readxl: read Excel files

-   knitr

-   data.table: extension of data.frame, which can aggregate large data (100 GB in RAM), orderd joins, add or modify or delete columns

-   CGPFunctions

-   ggHoriPlot: allows user to build horisonplot

-   tidyverse

## Plotting Calendar Heatmap

### Import Data

In this exercise, we'll be using data file that consist of 199K rows of time-series cyber attack records by country.

```{r}
attacks <- read_csv("data/eventlog.csv")
```

### Data Structure of Dataset

First, we'll check the structure of data frame before analysis using kable.

```{r}
kable(head(attacks))
```

The data frame consist of 3 columns:

-   timestamp: contain the date-time value in POSIXct format

-   source_country: contain country source of attack

-   tz: contain the timezone fo the source of IP address

### Data Preparation

We'll be deriving *weekday* and *hour of day* columns.

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

::: {.callout-note title="What does this code do"}
-   `...function(ts, sc, tz)` : defines function using ts, sc and tz as inputs to the function

-   `ymd_hms(ts,tz = tz[1], quiet = TRUE)` : convert ts into proper datetime object using ymd_hms() from lubridate library

-   `tz =tz[1]` : set timezone

-   `quiet = TRUE` : suppress warning for parsing failure

-   dt table is then created using data.table library with transformed columns
:::

Next, we'll be creating attacks tibble data

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

::: {.callout-note title="What does the code do"}
-   `weekday_levels` : define custom order for weekdays

-   `do(make)hr_weekday...` : run the function created previously and return data.table with timestamp, source_country and tz as columns

-   `mutate(...)` in the last line: convert wkday and hour into factor data type
:::

This is the table after processing

```{r}
kable(head(attacks))
```

### Build Calendar Heatmap

Calendar heatmap is used to display time based data using calendar layout, every day represent a day and color based on the value. In this example, we'll be building calender heatmap to visualize the cyber attacks occurred in each hour of the day.

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

::: {.callout-note title="Important points of this code"}
-   grouped variable counts the number of rows with different combination of weekday and hour and remove the grouping and remove missing values (using `na.omit()`)

-   Plots the heatmap with `geom_tile()` and `coord_equal()` to plot square-shaped tiles
:::

### Create Multiple Calendar Heatmaps

In this example, we'll be visualizing calendar heatmaps for top 4 countries with highest cyber attack. First, we'll derive attack by country by:

-   Count the number of attacks by country

-   Calculate the percentage of attacks by country

-   Sort the records by descending order by highest number of attacks

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

Next, we'll prepare the tidy data frame and extract attack records of the top 4 countries from attacks data frame and save it in a tibble data frame called top4_attacks.

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()
```

Lastly, we'll be plotting the heatmaps side by side by using `facet_wrap()` .

```{r}
ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

## Plotting Cycle Plot

### Import Data

In this example, we'll be using dataset of arrival by air.

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

### Data Structure of Dataset

First, we'll check the structure of data frame before analysis using kable.

```{r}
kable(head(air))
```

### Data Preparation

We'll create two new columns called month and year which are derived from Month-year column

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

Next, we'll extract data for the target country we want.

```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

Then, we'll compute year average arrivals using `group_by()` and `summarise()` .

```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

### Plotting the cycle plot

Next, we'll be plotting the cycle plot

```{r}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

## Plotting Slopegraph

### Import Data

In this example, we'll be using a dataset on rice data.

```{r}
rice <- read_csv("data/rice.csv")
```

### Data Structure of Dataset

```{r}
kable(head(rice))
```

### Plotting a slopegraph

Slopegraph is **compare changes** over time for list of nouns (**categories**) located on **ordinal** or **interval** scale. In this example, we'll plot a slopegraph to compare two different years, 1961 and 1980 using `newggslopegraph()`.

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980")
```
