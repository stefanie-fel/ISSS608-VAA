---
title: "Hands-on Exercise 1"
author: "Stefanie Felicia"
---

# Getting Started

## Install and launch R packages

The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.

```{r}
pacman::p_load(tidyverse)


```

Importing the data

```{r}
exam_data <- read_csv("Exam_data.csv")
```

------------------------------------------------------------------------

Plotting a simple bar chart to test if it works.

```{r}

ggplot(data=exam_data, aes(x=RACE)) + geom_bar()
```

## Grammar of Graphics

Grammar of Graphics defined by Leeland Wilkinson (1999) to be framework that follows a layered approach to describe and construct visualization. ggplot2 applies the grammar of graphics:

![7 layers of grammar of graphics]("https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.linkedin.com%2Fpulse%2Fintroduction-ggplot-series-mukul-kr-singh-chauhan&psig=AOvVaw1XJNvpHkJgzeekF8sTB597&ust=1745335562335000&source=images&cd=vfe&opi=89978449&ved=0CBQQjRxqFwoTCNi11uS36YwDFQAAAAAdAAAAABAE")

1.  Data: dataset that's being plotted

2.  Aesthetics: properties that can be perceived on the graphics

3.  Geometrics: visual elements used for data (e.g. point, bar or line).

4.  Facets: how to break up and display subset of data as small multiples (conditioning or latticing)

5.  Statistics: statistical transformation that summarizes data (e.g. mean or confidence intervals)

6.  Coordinate systems: describes how data coordinates are mapped to the plane of graphic

7.  Themes: controls display part of the visualization (main title, sub-title, y-axis title and legend).

## Exploring different geometric objects

First we will explore **geom_bar**, which is used to plot bar charts. Here is how the code looks like and the graph:

```{r}
ggplot(data=exam_data, aes(x=RACE))+geom_bar()
```

Next, we'll be exploring dot plots (**geom_dotplot**). It's quite similar to bar chart but in dot form instead of a bar. But it may not always be the most useful graph, as it leaves out y-axis values.

```{r}
ggplot(data=exam_data, aes(x=MATHS))+geom_dotplot(binwidth=2.5, dotsize=0.5) + scale_y_continuous(NULL, breaks=NULL)
```

Next, **geom_histogram** plots a histogram. But it's possible to stack different categorical values to compare distributions of each variable like below:

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, fill = GENDER)) +
  geom_histogram(bins=20, color="grey30")  
```

**Geom_density** is used to draw density estimate, which is a smoother version of a histogram. Similar to the histogram, you can stack different variables.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, colour=GENDER)) +
  geom_density()    
```

**Geom_boxplot** is used to plot boxplot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +    
  geom_boxplot(notch=TRUE)   
```

**Geom_violin** is used to plot a violin plot as a compact display of continuous distribution (similar to boxplot).

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

**Geom_point** is used to plot scatterplot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()      
```

It's also possible to plot two different geometry objects at the same graph. In this example, I'll be plotting boxplot and scatterplot at the same graph. It is done by just adding '+' after the first geom object.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
geom_boxplot() +          geom_point(position="jitter", size = 0.5)  
```

### Exploring stats summary

Incorporating **stats_summary** after geom object reveal statistic summary, such as average, median, max or min. In this example, the function mean is used:

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom ="point", fun = "mean",    colour ="red", size=4)     
```

Adding best fit line is possible by using the function **geom_smooth**:

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
linewidth=0.5)
```

## Exploring facet object

Facet generate small multiple trellis plot, which display different subset of data. There are two types of facet: **facet_wrap** and **facet_grid**

**Facet_wrap** is used to wrap 1-dimension sequence of panels into 2-dimension. So this creates multiple plot for one variable like below:

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

**Facet_grid** is used to create a grid of panels using one or two variables.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

## Exploring coordinates

There are different types of coordinates available such as: **coord_cartesian()**, **coord_flip()**, **coord_fixed()** and **coord_quickmap()**.

**Coord_flip** is used to flip horizontal bars into vertical bars.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

### Changing y and x-axis range in coordinate object

Changing the range of y and x-axis can be done by specifying *xlim* and *ylim* in the coordinate object.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
linewidth=0.5) + 
  coord_cartesian(xlim=c(0,100),
ylim=c(0,100))
```

## Aesthetic in R

There are a lot of different ways to beautify graphs. Themes are one way to add aesthetic to the graphs, as it affects background color, size of fonts, gridline and color of labels. Different themes will affect the look of the graph. In this example, I used the minimal theme:

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
